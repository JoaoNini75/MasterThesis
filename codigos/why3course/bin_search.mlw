(* Binary Search in an Array *)

use int.Int
use int.ComputerDivision
use array.Array

predicate sorted (a: array int) =
  forall i j:int. 0 <= i <= j < a.length -> a[i] <= a[j]

let binary_search (a : array int) (v: int)
  requires { sorted a }
  ensures { -1 <= result < a.length }
  ensures { result >= 0 -> a[result] = v }
  ensures { result = -1 -> forall k. 0 <= k < a.length -> a[k] <> v }
  =
    let ref l = 0 in
    let ref u = a.length - 1 in
    let ref res = -1 in
    while res < 0 && l <= u do
        invariant { 0 <= l }
        invariant { u < a.length }
        invariant { -1 <= res < a.length }
        invariant { res >= 0 -> a[res] = v }
        invariant { res = -1 -> forall k. (0 <= k < l \/ u < k < a.length) -> a[k] <> v }
        variant { u - l }
        let m = div (u + l) 2 in
        if a[m] < v then l <- m+1
        else if a[m] > v then u <- m-1
        else (res <- m ; l <- m+1)
      done;
    res

(*
Local Variables:
compile-command: "why3 ide bin_search.mlw"
End:
*)
