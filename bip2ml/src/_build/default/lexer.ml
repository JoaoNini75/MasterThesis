# 4 "lexer.mll"
 
  open Lexing
  open Ast_bip
  open Parser

  exception Lexing_error of string

  let is_first_uppercase_ascii s =
    match s.[0] with
    | 'A' .. 'Z' -> true
    | _ -> false

  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      [ "let", LET;
        "in", IN;
        "ref", REF;
        "if", IF;
        "then", THEN;
        "else", ELSE;
        "for", FOR;
        "while", WHILE;
        "to", TO;
        "do", DO;
        "done", DONE;
        "begin", BEGIN;
        "end", END;
        "not", NOT;
        "true", CST (Cbool true);
        "false", CST (Cbool false);
        "mod", MOD;
        "int", INT;
        "bool", BOOL;
        "string", STRING;
        "None", NONE;
        "rec", REC;
        "assert", ASSERT;
        "match", MATCH;
        "with", WITH;
        "type", TYPE;
        "of", OF;
        "and", AND;
        "open", OPEN;
        "include", INCLUDE];
    fun s -> try Hashtbl.find h s with Not_found -> 
      if is_first_uppercase_ascii s
      then IDENT_CAP s
      else IDENT s

  let string_buffer = Buffer.create 1024
  let spec_buf = Buffer.create 1024

# 56 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\211\255\212\255\213\255\215\255\217\255\218\255\221\255\
    \229\255\077\000\230\255\231\255\077\000\233\255\234\255\028\000\
    \001\000\002\000\031\000\092\000\035\000\246\255\247\255\074\000\
    \249\255\091\000\192\000\011\001\108\000\003\000\255\255\226\255\
    \087\000\253\255\086\001\222\255\220\255\244\255\216\255\093\000\
    \240\255\243\255\224\255\242\255\238\255\237\255\223\255\236\255\
    \214\255\228\255\145\000\252\255\253\255\141\000\141\000\255\255\
    \254\255\177\000\253\255\254\255\143\000\255\255\144\001\251\255\
    \252\255\216\000\255\255\253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\025\000\255\255\255\255\023\000\255\255\255\255\030\000\
    \044\000\016\000\028\000\014\000\010\000\255\255\255\255\007\000\
    \255\255\036\000\005\000\004\000\020\000\001\000\255\255\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\051\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\058\000\000\000\000\000\255\255\000\000\064\000\000\000\
    \000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\030\000\000\000\029\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\018\000\008\000\029\000\000\000\000\000\016\000\045\000\
    \028\000\014\000\022\000\024\000\013\000\023\000\007\000\021\000\
    \010\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\012\000\011\000\019\000\020\000\017\000\044\000\
    \004\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\006\000\043\000\005\000\003\000\025\000\
    \037\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\046\000\015\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\048\000\
    \036\000\038\000\049\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\031\000\032\000\033\000\
    \047\000\040\000\041\000\042\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\056\000\055\000\
    \061\000\054\000\034\000\053\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\035\000\
    \039\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\067\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\000\000\000\000\000\000\000\000\034\000\
    \000\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\000\000\068\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\034\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \000\000\052\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\059\000\066\000\000\000\000\000\034\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \063\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\029\000\255\255\255\255\000\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\000\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\012\000\
    \023\000\019\000\012\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\028\000\028\000\032\000\
    \015\000\019\000\019\000\039\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\053\000\054\000\
    \060\000\050\000\025\000\050\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\255\255\025\000\
    \019\000\255\255\255\255\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\065\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\255\255\255\255\255\255\026\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\065\000\255\255\
    \255\255\255\255\255\255\255\255\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\255\255\255\255\
    \255\255\255\255\027\000\255\255\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\050\000\255\255\255\255\255\255\255\255\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\057\000\062\000\255\255\255\255\034\000\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\062\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \062\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_tokens lexbuf =
   __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 68 "lexer.mll"
            ( new_line lexbuf; next_tokens lexbuf )
# 277 "lexer.ml"

  | 1 ->
# 69 "lexer.mll"
            ( next_tokens lexbuf )
# 282 "lexer.ml"

  | 2 ->
# 72 "lexer.mll"
    (
      Buffer.clear spec_buf; 
      gather_spec lexbuf
    )
# 290 "lexer.ml"

  | 3 ->
# 78 "lexer.mll"
    (
      skip_comment 1 lexbuf;
      next_tokens lexbuf
    )
# 298 "lexer.ml"

  | 4 ->
let
# 83 "lexer.mll"
             id
# 304 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 83 "lexer.mll"
                ( id_or_kwd id )
# 308 "lexer.ml"

  | 5 ->
let
# 84 "lexer.mll"
                 id
# 314 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 84 "lexer.mll"
                    ( id_or_kwd id )
# 318 "lexer.ml"

  | 6 ->
# 85 "lexer.mll"
            ( PLUS )
# 323 "lexer.ml"

  | 7 ->
# 86 "lexer.mll"
            ( MINUS )
# 328 "lexer.ml"

  | 8 ->
# 87 "lexer.mll"
            ( TIMES )
# 333 "lexer.ml"

  | 9 ->
# 88 "lexer.mll"
            ( DIV )
# 338 "lexer.ml"

  | 10 ->
# 89 "lexer.mll"
            ( EQUAL )
# 343 "lexer.ml"

  | 11 ->
# 90 "lexer.mll"
            ( CMP Beqphy )
# 348 "lexer.ml"

  | 12 ->
# 91 "lexer.mll"
            ( CMP Bneq )
# 353 "lexer.ml"

  | 13 ->
# 92 "lexer.mll"
            ( CMP Bneqphy )
# 358 "lexer.ml"

  | 14 ->
# 93 "lexer.mll"
            ( CMP Blt )
# 363 "lexer.ml"

  | 15 ->
# 94 "lexer.mll"
            ( CMP Ble )
# 368 "lexer.ml"

  | 16 ->
# 95 "lexer.mll"
            ( CMP Bgt )
# 373 "lexer.ml"

  | 17 ->
# 96 "lexer.mll"
            ( CMP Bge )
# 378 "lexer.ml"

  | 18 ->
# 97 "lexer.mll"
            ( LOGICAND )
# 383 "lexer.ml"

  | 19 ->
# 98 "lexer.mll"
            ( LOGICOR )
# 388 "lexer.ml"

  | 20 ->
# 99 "lexer.mll"
            ( LP )
# 393 "lexer.ml"

  | 21 ->
# 100 "lexer.mll"
            ( RP )
# 398 "lexer.ml"

  | 22 ->
# 101 "lexer.mll"
            ( COMMA )
# 403 "lexer.ml"

  | 23 ->
# 102 "lexer.mll"
            ( COLON )
# 408 "lexer.ml"

  | 24 ->
# 103 "lexer.mll"
            ( SEMICOLON )
# 413 "lexer.ml"

  | 25 ->
let
# 104 "lexer.mll"
               s
# 419 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 105 "lexer.mll"
            ( try CST (Cint (int_of_string s))
              with _ -> raise (Lexing_error ("Constant too large: " ^ s)) )
# 424 "lexer.ml"

  | 26 ->
# 107 "lexer.mll"
            ( CST (Cstring (string lexbuf)) )
# 429 "lexer.ml"

  | 27 ->
# 108 "lexer.mll"
            ( ASSIGN )
# 434 "lexer.ml"

  | 28 ->
# 109 "lexer.mll"
            ( DEREF )
# 439 "lexer.ml"

  | 29 ->
# 110 "lexer.mll"
            ( UNIT )
# 444 "lexer.ml"

  | 30 ->
# 111 "lexer.mll"
            ( CASE )
# 449 "lexer.ml"

  | 31 ->
# 113 "lexer.mll"
            ( PIPE )
# 454 "lexer.ml"

  | 32 ->
# 114 "lexer.mll"
            ( LFLOOR )
# 459 "lexer.ml"

  | 33 ->
# 115 "lexer.mll"
            ( RFLOOR )
# 464 "lexer.ml"

  | 34 ->
# 116 "lexer.mll"
            ( DOT )
# 469 "lexer.ml"

  | 35 ->
# 118 "lexer.mll"
            ( ARROW )
# 474 "lexer.ml"

  | 36 ->
# 119 "lexer.mll"
            ( WILDCARD )
# 479 "lexer.ml"

  | 37 ->
# 120 "lexer.mll"
            ( LSQBR )
# 484 "lexer.ml"

  | 38 ->
# 121 "lexer.mll"
            ( RSQBR )
# 489 "lexer.ml"

  | 39 ->
# 122 "lexer.mll"
            ( INVARROW )
# 494 "lexer.ml"

  | 40 ->
# 123 "lexer.mll"
            ( AT_SYM )
# 499 "lexer.ml"

  | 41 ->
# 124 "lexer.mll"
            ( PREPEND )
# 504 "lexer.ml"

  | 42 ->
# 125 "lexer.mll"
            ( CONCAT_STR )
# 509 "lexer.ml"

  | 43 ->
# 127 "lexer.mll"
            ( EOF )
# 514 "lexer.ml"

  | 44 ->
let
# 128 "lexer.mll"
         c
# 520 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 128 "lexer.mll"
            ( raise (Lexing_error ("Illegal character: " ^ String.make 1 c)) )
# 524 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

and skip_comment depth lexbuf =
   __ocaml_lex_skip_comment_rec depth lexbuf 50
and __ocaml_lex_skip_comment_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 131 "lexer.mll"
          ( skip_comment (depth + 1) lexbuf; skip_comment (depth + 1) lexbuf )
# 536 "lexer.ml"

  | 1 ->
# 132 "lexer.mll"
          ( () )
# 541 "lexer.ml"

  | 2 ->
# 133 "lexer.mll"
          ( raise (Lexing_error "Unterminated comment") )
# 546 "lexer.ml"

  | 3 ->
# 134 "lexer.mll"
          ( skip_comment depth lexbuf )
# 551 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_comment_rec depth lexbuf __ocaml_lex_state

and gather_spec lexbuf =
   __ocaml_lex_gather_spec_rec lexbuf 57
and __ocaml_lex_gather_spec_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 137 "lexer.mll"
            ( SPEC (Buffer.contents spec_buf) )
# 563 "lexer.ml"

  | 1 ->
# 138 "lexer.mll"
            ( raise (Lexing_error "Unterminated specification ") )
# 568 "lexer.ml"

  | 2 ->
let
# 139 "lexer.mll"
         c
# 574 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 139 "lexer.mll"
            ( Buffer.add_char spec_buf c; gather_spec lexbuf )
# 578 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_gather_spec_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 62
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 143 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 592 "lexer.ml"

  | 1 ->
# 147 "lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 598 "lexer.ml"

  | 2 ->
# 150 "lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 604 "lexer.ml"

  | 3 ->
let
# 152 "lexer.mll"
         c
# 610 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 153 "lexer.mll"
      ( Buffer.add_char string_buffer c;
	string lexbuf )
# 615 "lexer.ml"

  | 4 ->
# 156 "lexer.mll"
      ( raise (Lexing_error "String not terminated") )
# 620 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 158 "lexer.mll"
 

  let next_token =
    let tokens = Queue.create () in (* next tokens to emit *)
    fun lb ->
      if Queue.is_empty tokens then begin
        let l = next_tokens lb in
        Queue.add l tokens
      end;
      Queue.pop tokens

  open Format

  let pp_token fmt (t: token) =
    match t with
    | WHILE -> fprintf fmt "while"
    | TIMES -> fprintf fmt "times"
    | THEN -> fprintf fmt "then"
    | RP -> fprintf fmt ")"
    | RFLOOR -> fprintf fmt "_|"
    | REF -> fprintf fmt "ref"
    | PLUS -> fprintf fmt "+"
    | CASE -> fprintf fmt "|"
    | PIPE -> fprintf fmt "<|>" 
    | NOT -> fprintf fmt "not"
    | LOGICAND -> fprintf fmt "&&"
    | LOGICOR -> fprintf fmt "||"
    | MOD -> fprintf fmt "mod"
    | MINUS -> fprintf fmt "-"
    | LP -> fprintf fmt "("
    | LFLOOR -> fprintf fmt "|_"
    | LET -> fprintf fmt "let"
    | INT -> fprintf fmt "int"
    | STRING -> fprintf fmt "string"
    | IN -> fprintf fmt "in"
    | IF -> fprintf fmt "if"
    | IDENT s -> fprintf fmt "%s (identifier)" s
    | IDENT_CAP s -> fprintf fmt "%s (ident_cap)" s
    | FOR -> fprintf fmt "for"
    | EQUAL -> fprintf fmt "="
    | EOF -> fprintf fmt "eof"
    | END -> fprintf fmt "end"
    | ELSE -> fprintf fmt "else"
    | DONE -> fprintf fmt "done"
    | DO -> fprintf fmt "do"
    | TO -> fprintf fmt "to"
    | DIV -> fprintf fmt "/"
    | DEREF -> fprintf fmt "!"
    | CST c ->
      let s =
        match c with
        | Cint  i -> string_of_int i
        | Cbool b -> string_of_bool b
        | Cstring str -> str
        | Cnone -> "Cnone"
      in
      fprintf fmt "%s (const)" s

    | UNIT -> fprintf fmt "unit"
    | COMMA -> fprintf fmt ","
    | COLON -> fprintf fmt ":"
    | SEMICOLON -> fprintf fmt ";"
    | DOT -> fprintf fmt "."
    | CMP op ->
      let s =
        match op with
        | Beqphy  -> "=="
        | Bneqphy -> "!=" 
        | Bneq -> "<>"
        | Blt  -> "<"
        | Ble  -> "<="
        | Bgt  -> ">"
        | Bge  -> ">="
        | _ -> assert false
      in
      fprintf fmt "%s (cmp)" s

    | BOOL -> fprintf fmt "bool"
    | BEGIN -> fprintf fmt "begin"
    | ASSIGN -> fprintf fmt ":="
    | NONE -> fprintf fmt "none"
    | SPEC s -> fprintf fmt "%s (specification)" s
    | REC -> fprintf fmt "rec"
    | ASSERT -> fprintf fmt "assert"
    | MATCH -> fprintf fmt "match"
    | WITH -> fprintf fmt "with"
    | ARROW -> fprintf fmt "->"
    | WILDCARD -> fprintf fmt "_"
    | TYPE -> fprintf fmt "type"
    | OF -> fprintf fmt "of"
    | AND -> fprintf fmt "and"
    | OPEN -> fprintf fmt "open"
    | INCLUDE -> fprintf fmt "include"
    | LSQBR -> fprintf fmt "["
    | RSQBR -> fprintf fmt "]"
    | INVARROW -> fprintf fmt "<-"
    | AT_SYM -> fprintf fmt "@"
    | PREPEND -> fprintf fmt "::"
    | CONCAT_STR -> fprintf fmt "^"

  let () =
    let fname = Sys.argv.(1) in
    let cin = open_in fname in
    let lb = Lexing.from_channel cin in
    let rec loop () =
      let token : Parser.token = next_token lb in
        (* eprintf "@[%a@]@." pp_token token; *)
      if token <> EOF then loop () in
    loop ()


# 739 "lexer.ml"
