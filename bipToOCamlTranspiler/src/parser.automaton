State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On SPEC shift to state 1
-- On LET shift to state 2
-- On spec shift to state 4
-- On list(decl) shift to state 5
-- On fun_rec shift to state 7
-- On file shift to state 159
-- On decl shift to state 160
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## SPEC
## LR(1) items:
spec -> SPEC . [ WHILE SPEC REF NOT MINUS LP LFLOOR LET IF IDENT FOR EOF DEREF CST ASSERT ]
## Transitions:
## Reductions:
-- On WHILE SPEC REF NOT MINUS LP LFLOOR LET IF IDENT FOR EOF DEREF CST ASSERT
--   reduce production spec -> SPEC

State 2:
## Known stack suffix:
## LET
## LR(1) items:
fun_rec -> LET . REC [ IDENT ]
fun_rec -> LET . [ IDENT ]
## Transitions:
-- On REC shift to state 3
## Reductions:
-- On IDENT
--   reduce production fun_rec -> LET

State 3:
## Known stack suffix:
## LET REC
## LR(1) items:
fun_rec -> LET REC . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production fun_rec -> LET REC

State 4:
## Known stack suffix:
## spec
## LR(1) items:
decl -> spec . [ SPEC LET EOF ]
## Transitions:
## Reductions:
-- On SPEC LET EOF
--   reduce production decl -> spec

State 5:
## Known stack suffix:
## list(decl)
## LR(1) items:
file -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
file -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(decl) EOF

State 7:
## Known stack suffix:
## fun_rec
## LR(1) items:
decl -> fun_rec . ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On IDENT shift to state 8
-- On ident shift to state 9
## Reductions:

State 8:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WITH TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DOT DONE DO DIV COMMA COLON CMP BOOL ASSIGN ARROW ]
## Transitions:
## Reductions:
-- On WITH TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DOT DONE DO DIV COMMA COLON CMP BOOL ASSIGN ARROW
--   reduce production ident -> IDENT

State 9:
## Known stack suffix:
## fun_rec ident
## LR(1) items:
decl -> fun_rec ident . LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On LP shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## fun_rec ident LP
## LR(1) items:
decl -> fun_rec ident LP . loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On LFLOOR shift to state 11
-- On IDENT shift to state 8
-- On separated_nonempty_list(COMMA,parameter) shift to state 22
-- On parameter_core shift to state 23
-- On parameter shift to state 26
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 29
-- On ident shift to state 14
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 11:
## Known stack suffix:
## LFLOOR
## LR(1) items:
parameter -> LFLOOR . parameter_core RFLOOR [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 8
-- On parameter_core shift to state 12
-- On ident shift to state 14
## Reductions:

State 12:
## Known stack suffix:
## LFLOOR parameter_core
## LR(1) items:
parameter -> LFLOOR parameter_core . RFLOOR [ RP COMMA ]
## Transitions:
-- On RFLOOR shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## LFLOOR parameter_core RFLOOR
## LR(1) items:
parameter -> LFLOOR parameter_core RFLOOR . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> LFLOOR parameter_core RFLOOR

State 14:
## Known stack suffix:
## ident
## LR(1) items:
parameter_core -> ident . option(COLON) option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On COLON shift to state 15
-- On option(COLON) shift to state 16
## Reductions:
-- On RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) ->

State 15:
## Known stack suffix:
## COLON
## LR(1) items:
option(COLON) -> COLON . [ RP RFLOOR PIPE NONE INT COMMA BOOL ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) -> COLON

State 16:
## Known stack suffix:
## ident option(COLON)
## LR(1) items:
parameter_core -> ident option(COLON) . option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On NONE shift to state 17
-- On INT shift to state 18
-- On BOOL shift to state 19
-- On option(bip_type) shift to state 20
-- On bip_type shift to state 21
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) ->

State 17:
## Known stack suffix:
## NONE
## LR(1) items:
bip_type -> NONE . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> NONE

State 18:
## Known stack suffix:
## INT
## LR(1) items:
bip_type -> INT . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> INT

State 19:
## Known stack suffix:
## BOOL
## LR(1) items:
bip_type -> BOOL . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> BOOL

State 20:
## Known stack suffix:
## ident option(COLON) option(bip_type)
## LR(1) items:
parameter_core -> ident option(COLON) option(bip_type) . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production parameter_core -> ident option(COLON) option(bip_type)

State 21:
## Known stack suffix:
## bip_type
## LR(1) items:
option(bip_type) -> bip_type . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) -> bip_type

State 22:
## Known stack suffix:
## separated_nonempty_list(COMMA,parameter)
## LR(1) items:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter)

State 23:
## Known stack suffix:
## parameter_core
## LR(1) items:
parameter -> parameter_core . [ RP COMMA ]
parameter -> parameter_core . PIPE parameter_core [ RP COMMA ]
## Transitions:
-- On PIPE shift to state 24
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core

State 24:
## Known stack suffix:
## parameter_core PIPE
## LR(1) items:
parameter -> parameter_core PIPE . parameter_core [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 8
-- On parameter_core shift to state 25
-- On ident shift to state 14
## Reductions:

State 25:
## Known stack suffix:
## parameter_core PIPE parameter_core
## LR(1) items:
parameter -> parameter_core PIPE parameter_core . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core PIPE parameter_core

State 26:
## Known stack suffix:
## parameter
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RP ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On COMMA shift to state 27
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter

State 27:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On LFLOOR shift to state 11
-- On IDENT shift to state 8
-- On separated_nonempty_list(COMMA,parameter) shift to state 28
-- On parameter_core shift to state 23
-- On parameter shift to state 26
-- On ident shift to state 14
## Reductions:

State 28:
## Known stack suffix:
## parameter COMMA separated_nonempty_list(COMMA,parameter)
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter)

State 29:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) . RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On RP shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP . option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On COLON shift to state 31
-- On option(fun_ret) shift to state 38
-- On fun_ret shift to state 158
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 31:
## Known stack suffix:
## COLON
## LR(1) items:
fun_ret -> COLON . bip_type [ EQUAL ]
fun_ret -> COLON . LFLOOR bip_type RFLOOR [ EQUAL ]
fun_ret -> COLON . bip_type PIPE bip_type [ EQUAL ]
## Transitions:
-- On NONE shift to state 17
-- On LFLOOR shift to state 32
-- On INT shift to state 18
-- On BOOL shift to state 19
-- On bip_type shift to state 35
## Reductions:

State 32:
## Known stack suffix:
## COLON LFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR . bip_type RFLOOR [ EQUAL ]
## Transitions:
-- On NONE shift to state 17
-- On INT shift to state 18
-- On BOOL shift to state 19
-- On bip_type shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## COLON LFLOOR bip_type
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type . RFLOOR [ EQUAL ]
## Transitions:
-- On RFLOOR shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## COLON LFLOOR bip_type RFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type RFLOOR . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON LFLOOR bip_type RFLOOR

State 35:
## Known stack suffix:
## COLON bip_type
## LR(1) items:
fun_ret -> COLON bip_type . [ EQUAL ]
fun_ret -> COLON bip_type . PIPE bip_type [ EQUAL ]
## Transitions:
-- On PIPE shift to state 36
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type

State 36:
## Known stack suffix:
## COLON bip_type PIPE
## LR(1) items:
fun_ret -> COLON bip_type PIPE . bip_type [ EQUAL ]
## Transitions:
-- On NONE shift to state 17
-- On INT shift to state 18
-- On BOOL shift to state 19
-- On bip_type shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## COLON bip_type PIPE bip_type
## LR(1) items:
fun_ret -> COLON bip_type PIPE bip_type . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type PIPE bip_type

State 38:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret)
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) . EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On EQUAL shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL . block spec [ SPEC LET EOF ]
## Transitions:
-- On BEGIN shift to state 40
-- On block shift to state 156
## Reductions:

State 40:
## Known stack suffix:
## BEGIN
## LR(1) items:
block -> BEGIN . block_core END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 104
-- On block_core shift to state 154
## Reductions:

State 41:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> WHILE . expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 139
## Reductions:

State 42:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 138
## Reductions:

State 43:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 137
## Reductions:

State 44:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 136
## Reductions:

State 45:
## Known stack suffix:
## LP
## LR(1) items:
expr -> LP . MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 134
## Reductions:

State 46:
## Known stack suffix:
## LP MATCH
## LR(1) items:
expr -> LP MATCH . ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On IDENT shift to state 8
-- On ident shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LP MATCH ident
## LR(1) items:
expr -> LP MATCH ident . WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WITH shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LP MATCH ident WITH
## LR(1) items:
expr -> LP MATCH ident WITH . PIPE loption(separated_nonempty_list(PIPE,case)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On PIPE shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LP MATCH ident WITH PIPE
## LR(1) items:
expr -> LP MATCH ident WITH PIPE . loption(separated_nonempty_list(PIPE,case)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On LP shift to state 50
-- On separated_nonempty_list(PIPE,case) shift to state 128
-- On loption(separated_nonempty_list(PIPE,case)) shift to state 129
-- On case shift to state 131
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(PIPE,case)) ->

State 50:
## Known stack suffix:
## LP
## LR(1) items:
case -> LP . pattern ARROW expr RP [ RP PIPE ]
## Transitions:
-- On WILDCARD shift to state 51
-- On IDENT shift to state 8
-- On CST shift to state 52
-- On pattern shift to state 53
-- On ident shift to state 127
## Reductions:

State 51:
## Known stack suffix:
## WILDCARD
## LR(1) items:
pattern -> WILDCARD . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> WILDCARD

State 52:
## Known stack suffix:
## CST
## LR(1) items:
pattern -> CST . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> CST

State 53:
## Known stack suffix:
## LP pattern
## LR(1) items:
case -> LP pattern . ARROW expr RP [ RP PIPE ]
## Transitions:
-- On ARROW shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## LP pattern ARROW
## LR(1) items:
case -> LP pattern ARROW . expr RP [ RP PIPE ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 125
## Reductions:

State 55:
## Known stack suffix:
## LFLOOR
## LR(1) items:
expr -> LFLOOR . expr RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 123
## Reductions:

State 56:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET . ident EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On IDENT shift to state 8
-- On ident shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## LET ident
## LR(1) items:
expr -> LET ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET ident . EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On EQUAL shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LET ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET ident EQUAL . expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 114
## Reductions:

State 59:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 109
## Reductions:

State 60:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . ident EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On IDENT shift to state 8
-- On ident shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## FOR ident
## LR(1) items:
expr -> FOR ident . EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On EQUAL shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## FOR ident EQUAL
## LR(1) items:
expr -> FOR ident EQUAL . expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 98
## Reductions:

State 63:
## Known stack suffix:
## DEREF
## LR(1) items:
expr -> DEREF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 97
## Reductions:

State 64:
## Known stack suffix:
## CST
## LR(1) items:
expr -> CST . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> CST

State 65:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . LP expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On LP shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## ASSERT LP
## LR(1) items:
expr -> ASSERT LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 95
## Reductions:

State 67:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> ident . ASSIGN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On LP shift to state 68
-- On ASSIGN shift to state 93
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> ident

State 68:
## Known stack suffix:
## ident LP
## LR(1) items:
expr -> ident LP . loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On separated_nonempty_list(COMMA,expr) shift to state 69
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 70
-- On ident shift to state 67
-- On expr shift to state 72
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 69:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 70:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On RP shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP

State 72:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
separated_nonempty_list(COMMA,expr) -> expr . [ RP ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On COMMA shift to state 91
-- On CMP shift to state 87
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 73:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr TIMES expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> expr TIMES expr

State 75:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr PLUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On MOD shift to state 77
-- On DIV shift to state 79
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DOT DONE DO COMMA CMP
--   reduce production expr -> expr PLUS expr

State 77:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr MOD expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> expr MOD expr

State 79:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr DIV expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> expr DIV expr

State 81:
## Known stack suffix:
## expr PIPE
## LR(1) items:
expr -> expr PIPE . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr PIPE expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DOT DONE DO COMMA
--   reduce production expr -> expr PIPE expr

State 83:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On MOD shift to state 77
-- On DIV shift to state 79
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DOT DONE DO COMMA CMP
--   reduce production expr -> expr MINUS expr

State 85:
## Known stack suffix:
## expr LOGICOR
## LR(1) items:
expr -> expr LOGICOR . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## expr LOGICOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr LOGICOR expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA
--   reduce production expr -> expr LOGICOR expr

State 87:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr -> expr CMP . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr CMP expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On DIV shift to state 79
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA
--   reduce production expr -> expr CMP expr

State 89:
## Known stack suffix:
## expr LOGICAND
## LR(1) items:
expr -> expr LOGICAND . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## expr LOGICAND expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr LOGICAND expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA
--   reduce production expr -> expr LOGICAND expr

State 91:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On separated_nonempty_list(COMMA,expr) shift to state 92
-- On ident shift to state 67
-- On expr shift to state 72
## Reductions:

State 92:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 93:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
expr -> ident ASSIGN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## ident ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> ident ASSIGN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DOT DONE DO COMMA
--   reduce production expr -> ident ASSIGN expr

State 95:
## Known stack suffix:
## ASSERT LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> ASSERT LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On RP shift to state 96
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 96:
## Known stack suffix:
## ASSERT LP expr RP
## LR(1) items:
expr -> ASSERT LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> ASSERT LP expr RP

State 97:
## Known stack suffix:
## DEREF expr
## LR(1) items:
expr -> DEREF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> DEREF expr

State 98:
## Known stack suffix:
## FOR ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> FOR ident EQUAL expr . TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TO shift to state 99
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 99:
## Known stack suffix:
## FOR ident EQUAL expr TO
## LR(1) items:
expr -> FOR ident EQUAL expr TO . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## FOR ident EQUAL expr TO expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> FOR ident EQUAL expr TO expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DO shift to state 101
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 101:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 102
-- On option(spec) shift to state 103
## Reductions:
-- On WHILE REF NOT MINUS LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 102:
## Known stack suffix:
## spec
## LR(1) items:
option(spec) -> spec . [ WHILE REF NOT MINUS LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT ]
## Transitions:
## Reductions:
-- On WHILE REF NOT MINUS LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) -> spec

State 103:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec)
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 104
-- On block_core shift to state 107
## Reductions:

State 104:
## Known stack suffix:
## expr
## LR(1) items:
block_core -> expr . [ END DONE ]
block_core -> expr . SEMICOLON block_core [ END DONE ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MOD expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . CMP expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . PIPE expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On SEMICOLON shift to state 105
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On END DONE
--   reduce production block_core -> expr

State 105:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
block_core -> expr SEMICOLON . block_core [ END DONE ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 104
-- On block_core shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## expr SEMICOLON block_core
## LR(1) items:
block_core -> expr SEMICOLON block_core . [ END DONE ]
## Transitions:
## Reductions:
-- On END DONE
--   reduce production block_core -> expr SEMICOLON block_core

State 107:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On DONE shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core DONE
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE

State 109:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> IF expr . THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On THEN shift to state 110
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 110:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On BEGIN shift to state 40
-- On block shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## IF expr THEN block
## LR(1) items:
expr -> IF expr THEN block . ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On ELSE shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## IF expr THEN block ELSE
## LR(1) items:
expr -> IF expr THEN block ELSE . block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On BEGIN shift to state 40
-- On block shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## IF expr THEN block ELSE block
## LR(1) items:
expr -> IF expr THEN block ELSE block . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> IF expr THEN block ELSE block

State 114:
## Known stack suffix:
## LET ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET ident EQUAL expr . PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 115
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On IN shift to state 121
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 115:
## Known stack suffix:
## LET ident EQUAL expr PIPE
## LR(1) items:
expr -> LET ident EQUAL expr PIPE . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 116
-- On expr shift to state 82
## Reductions:

State 116:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident
## LR(1) items:
expr -> ident . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> ident . ASSIGN expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On LP shift to state 68
-- On EQUAL shift to state 117
-- On ASSIGN shift to state 93
## Reductions:
-- On TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP
--   reduce production expr -> ident

State 117:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On IN shift to state 119
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 119:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DOT DONE DO COMMA
--   reduce production expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr

State 121:
## Known stack suffix:
## LET ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## LET ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> LET ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DOT DONE DO COMMA
--   reduce production expr -> LET ident EQUAL expr IN expr

State 123:
## Known stack suffix:
## LFLOOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LFLOOR expr . RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On RFLOOR shift to state 124
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 124:
## Known stack suffix:
## LFLOOR expr RFLOOR
## LR(1) items:
expr -> LFLOOR expr RFLOOR . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> LFLOOR expr RFLOOR

State 125:
## Known stack suffix:
## LP pattern ARROW expr
## LR(1) items:
case -> LP pattern ARROW expr . RP [ RP PIPE ]
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On RP shift to state 126
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 126:
## Known stack suffix:
## LP pattern ARROW expr RP
## LR(1) items:
case -> LP pattern ARROW expr RP . [ RP PIPE ]
## Transitions:
## Reductions:
-- On RP PIPE
--   reduce production case -> LP pattern ARROW expr RP

State 127:
## Known stack suffix:
## ident
## LR(1) items:
pattern -> ident . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> ident

State 128:
## Known stack suffix:
## separated_nonempty_list(PIPE,case)
## LR(1) items:
loption(separated_nonempty_list(PIPE,case)) -> separated_nonempty_list(PIPE,case) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(PIPE,case)) -> separated_nonempty_list(PIPE,case)

State 129:
## Known stack suffix:
## LP MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case))
## LR(1) items:
expr -> LP MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On RP shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## LP MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP
## LR(1) items:
expr -> LP MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> LP MATCH ident WITH PIPE loption(separated_nonempty_list(PIPE,case)) RP

State 131:
## Known stack suffix:
## case
## LR(1) items:
separated_nonempty_list(PIPE,case) -> case . [ RP ]
separated_nonempty_list(PIPE,case) -> case . PIPE separated_nonempty_list(PIPE,case) [ RP ]
## Transitions:
-- On PIPE shift to state 132
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(PIPE,case) -> case

State 132:
## Known stack suffix:
## case PIPE
## LR(1) items:
separated_nonempty_list(PIPE,case) -> case PIPE . separated_nonempty_list(PIPE,case) [ RP ]
## Transitions:
-- On LP shift to state 50
-- On separated_nonempty_list(PIPE,case) shift to state 133
-- On case shift to state 131
## Reductions:

State 133:
## Known stack suffix:
## case PIPE separated_nonempty_list(PIPE,case)
## LR(1) items:
separated_nonempty_list(PIPE,case) -> case PIPE separated_nonempty_list(PIPE,case) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(PIPE,case) -> case PIPE separated_nonempty_list(PIPE,case)

State 134:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On RP shift to state 135
-- On PLUS shift to state 75
-- On PIPE shift to state 81
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 135:
## Known stack suffix:
## LP expr RP
## LR(1) items:
expr -> LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> LP expr RP

State 136:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> MINUS expr

State 137:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA
--   reduce production expr -> NOT expr

State 138:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> REF expr

State 139:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> WHILE expr . PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 140
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DO shift to state 150
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 140:
## Known stack suffix:
## WHILE expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE . expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## WHILE expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> WHILE expr PIPE expr . DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DOT shift to state 142
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On PIPE DO
--   reduce production expr -> expr PIPE expr

State 142:
## Known stack suffix:
## WHILE expr PIPE expr DOT
## LR(1) items:
expr -> WHILE expr PIPE expr DOT . expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr . PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On PIPE shift to state 144
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:

State 144:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr PIPE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 75
-- On MOD shift to state 77
-- On MINUS shift to state 83
-- On LOGICOR shift to state 85
-- On LOGICAND shift to state 89
-- On DO shift to state 146
-- On DIV shift to state 79
-- On CMP shift to state 87
## Reductions:
-- On PIPE
--   reduce production expr -> expr PIPE expr

State 146:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 102
-- On option(spec) shift to state 147
## Reductions:
-- On WHILE REF NOT MINUS LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 147:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 104
-- On block_core shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On DONE shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE

State 150:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
expr -> WHILE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 102
-- On option(spec) shift to state 151
## Reductions:
-- On WHILE REF NOT MINUS LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 151:
## Known stack suffix:
## WHILE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 41
-- On REF shift to state 42
-- On NOT shift to state 43
-- On MINUS shift to state 44
-- On LP shift to state 45
-- On LFLOOR shift to state 55
-- On LET shift to state 56
-- On IF shift to state 59
-- On IDENT shift to state 8
-- On FOR shift to state 60
-- On DEREF shift to state 63
-- On CST shift to state 64
-- On ASSERT shift to state 65
-- On ident shift to state 67
-- On expr shift to state 104
-- On block_core shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## WHILE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On DONE shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## WHILE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> WHILE expr DO option(spec) block_core DONE

State 154:
## Known stack suffix:
## BEGIN block_core
## LR(1) items:
block -> BEGIN block_core . END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP ]
## Transitions:
-- On END shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## BEGIN block_core END
## LR(1) items:
block -> BEGIN block_core END . [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP
--   reduce production block -> BEGIN block_core END

State 156:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block . spec [ SPEC LET EOF ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec
## LR(1) items:
decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec . [ SPEC LET EOF ]
## Transitions:
## Reductions:
-- On SPEC LET EOF
--   reduce production decl -> fun_rec ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec

State 158:
## Known stack suffix:
## fun_ret
## LR(1) items:
option(fun_ret) -> fun_ret . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) -> fun_ret

State 159:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 160:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On SPEC shift to state 1
-- On LET shift to state 2
-- On spec shift to state 4
-- On list(decl) shift to state 161
-- On fun_rec shift to state 7
-- On decl shift to state 160
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 161:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

