State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On LET shift to state 1
-- On list(def) shift to state 113
-- On file shift to state 115
-- On def shift to state 116
## Reductions:
-- On EOF
--   reduce production list(def) ->

State 1:
## Known stack suffix:
## LET
## LR(1) items:
def -> LET . ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block [ LET EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DONE DO DIV COMMA COLON CMP BOOL ASSIGN ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DONE DO DIV COMMA COLON CMP BOOL ASSIGN
--   reduce production ident -> IDENT

State 3:
## Known stack suffix:
## LET ident
## LR(1) items:
def -> LET ident . LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block [ LET EOF ]
## Transitions:
-- On LP shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## LET ident LP
## LR(1) items:
def -> LET ident LP . loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block [ LET EOF ]
## Transitions:
-- On LFLOOR shift to state 5
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,parameter) shift to state 16
-- On parameter_core shift to state 17
-- On parameter shift to state 20
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 23
-- On ident shift to state 8
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 5:
## Known stack suffix:
## LFLOOR
## LR(1) items:
parameter -> LFLOOR . parameter_core RFLOOR [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 2
-- On parameter_core shift to state 6
-- On ident shift to state 8
## Reductions:

State 6:
## Known stack suffix:
## LFLOOR parameter_core
## LR(1) items:
parameter -> LFLOOR parameter_core . RFLOOR [ RP COMMA ]
## Transitions:
-- On RFLOOR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LFLOOR parameter_core RFLOOR
## LR(1) items:
parameter -> LFLOOR parameter_core RFLOOR . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> LFLOOR parameter_core RFLOOR

State 8:
## Known stack suffix:
## ident
## LR(1) items:
parameter_core -> ident . option(COLON) option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On COLON shift to state 9
-- On option(COLON) shift to state 10
## Reductions:
-- On RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) ->

State 9:
## Known stack suffix:
## COLON
## LR(1) items:
option(COLON) -> COLON . [ RP RFLOOR PIPE NONE INT COMMA BOOL ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) -> COLON

State 10:
## Known stack suffix:
## ident option(COLON)
## LR(1) items:
parameter_core -> ident option(COLON) . option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On NONE shift to state 11
-- On INT shift to state 12
-- On BOOL shift to state 13
-- On option(bip_type) shift to state 14
-- On bip_type shift to state 15
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) ->

State 11:
## Known stack suffix:
## NONE
## LR(1) items:
bip_type -> NONE . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> NONE

State 12:
## Known stack suffix:
## INT
## LR(1) items:
bip_type -> INT . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> INT

State 13:
## Known stack suffix:
## BOOL
## LR(1) items:
bip_type -> BOOL . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> BOOL

State 14:
## Known stack suffix:
## ident option(COLON) option(bip_type)
## LR(1) items:
parameter_core -> ident option(COLON) option(bip_type) . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production parameter_core -> ident option(COLON) option(bip_type)

State 15:
## Known stack suffix:
## bip_type
## LR(1) items:
option(bip_type) -> bip_type . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) -> bip_type

State 16:
## Known stack suffix:
## separated_nonempty_list(COMMA,parameter)
## LR(1) items:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter)

State 17:
## Known stack suffix:
## parameter_core
## LR(1) items:
parameter -> parameter_core . [ RP COMMA ]
parameter -> parameter_core . PIPE parameter_core [ RP COMMA ]
## Transitions:
-- On PIPE shift to state 18
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core

State 18:
## Known stack suffix:
## parameter_core PIPE
## LR(1) items:
parameter -> parameter_core PIPE . parameter_core [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 2
-- On parameter_core shift to state 19
-- On ident shift to state 8
## Reductions:

State 19:
## Known stack suffix:
## parameter_core PIPE parameter_core
## LR(1) items:
parameter -> parameter_core PIPE parameter_core . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core PIPE parameter_core

State 20:
## Known stack suffix:
## parameter
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RP ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On COMMA shift to state 21
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter

State 21:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On LFLOOR shift to state 5
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,parameter) shift to state 22
-- On parameter_core shift to state 17
-- On parameter shift to state 20
-- On ident shift to state 8
## Reductions:

State 22:
## Known stack suffix:
## parameter COMMA separated_nonempty_list(COMMA,parameter)
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter)

State 23:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) . RP option(fun_ret) EQUAL block [ LET EOF ]
## Transitions:
-- On RP shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP . option(fun_ret) EQUAL block [ LET EOF ]
## Transitions:
-- On COLON shift to state 25
-- On option(fun_ret) shift to state 32
-- On fun_ret shift to state 112
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 25:
## Known stack suffix:
## COLON
## LR(1) items:
fun_ret -> COLON . bip_type [ EQUAL ]
fun_ret -> COLON . LFLOOR bip_type RFLOOR [ EQUAL ]
fun_ret -> COLON . bip_type PIPE bip_type [ EQUAL ]
## Transitions:
-- On NONE shift to state 11
-- On LFLOOR shift to state 26
-- On INT shift to state 12
-- On BOOL shift to state 13
-- On bip_type shift to state 29
## Reductions:

State 26:
## Known stack suffix:
## COLON LFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR . bip_type RFLOOR [ EQUAL ]
## Transitions:
-- On NONE shift to state 11
-- On INT shift to state 12
-- On BOOL shift to state 13
-- On bip_type shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## COLON LFLOOR bip_type
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type . RFLOOR [ EQUAL ]
## Transitions:
-- On RFLOOR shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## COLON LFLOOR bip_type RFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type RFLOOR . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON LFLOOR bip_type RFLOOR

State 29:
## Known stack suffix:
## COLON bip_type
## LR(1) items:
fun_ret -> COLON bip_type . [ EQUAL ]
fun_ret -> COLON bip_type . PIPE bip_type [ EQUAL ]
## Transitions:
-- On PIPE shift to state 30
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type

State 30:
## Known stack suffix:
## COLON bip_type PIPE
## LR(1) items:
fun_ret -> COLON bip_type PIPE . bip_type [ EQUAL ]
## Transitions:
-- On NONE shift to state 11
-- On INT shift to state 12
-- On BOOL shift to state 13
-- On bip_type shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## COLON bip_type PIPE bip_type
## LR(1) items:
fun_ret -> COLON bip_type PIPE bip_type . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type PIPE bip_type

State 32:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret)
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) . EQUAL block [ LET EOF ]
## Transitions:
-- On EQUAL shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL . block [ LET EOF ]
## Transitions:
-- On BEGIN shift to state 34
-- On block shift to state 111
## Reductions:

State 34:
## Known stack suffix:
## BEGIN
## LR(1) items:
block -> BEGIN . block_core END [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END ELSE DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 85
-- On comment shift to state 59
-- On block_core shift to state 109
## Reductions:

State 35:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 105
-- On comment shift to state 59
## Reductions:

State 36:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 104
-- On comment shift to state 59
## Reductions:

State 37:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 103
-- On comment shift to state 59
## Reductions:

State 38:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 102
-- On comment shift to state 59
## Reductions:

State 39:
## Known stack suffix:
## LP
## LR(1) items:
expr -> LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 100
-- On comment shift to state 59
## Reductions:

State 40:
## Known stack suffix:
## LFLOOR
## LR(1) items:
expr -> LFLOOR . expr RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 98
-- On comment shift to state 59
## Reductions:

State 41:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LET ident
## LR(1) items:
expr -> LET ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On EQUAL shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LET ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 95
-- On comment shift to state 59
## Reductions:

State 44:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 90
-- On comment shift to state 59
## Reductions:

State 45:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . ident EQUAL expr TO expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## FOR ident
## LR(1) items:
expr -> FOR ident . EQUAL expr TO expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On EQUAL shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## FOR ident EQUAL
## LR(1) items:
expr -> FOR ident EQUAL . expr TO expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 81
-- On comment shift to state 59
## Reductions:

State 48:
## Known stack suffix:
## DEREF
## LR(1) items:
expr -> DEREF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 80
-- On comment shift to state 59
## Reductions:

State 49:
## Known stack suffix:
## CST
## LR(1) items:
expr -> CST . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> CST

State 50:
## Known stack suffix:
## COMMENT
## LR(1) items:
comment -> COMMENT . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production comment -> COMMENT

State 51:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> ident . ASSIGN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On LP shift to state 52
-- On ASSIGN shift to state 78
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> ident

State 52:
## Known stack suffix:
## ident LP
## LR(1) items:
expr -> ident LP . loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On separated_nonempty_list(COMMA,expr) shift to state 53
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 54
-- On ident shift to state 51
-- On expr shift to state 56
-- On comment shift to state 59
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 53:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 54:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On RP shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP

State 56:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
separated_nonempty_list(COMMA,expr) -> expr . [ RP ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On COMMA shift to state 76
-- On CMP shift to state 72
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 57:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 58
-- On comment shift to state 59
## Reductions:

State 58:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr TIMES expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> expr TIMES expr

State 59:
## Known stack suffix:
## comment
## LR(1) items:
expr -> comment . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> comment

State 60:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 61
-- On comment shift to state 59
## Reductions:

State 61:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr PLUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On MOD shift to state 62
-- On DIV shift to state 64
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DONE DO COMMA CMP
--   reduce production expr -> expr PLUS expr

State 62:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 63
-- On comment shift to state 59
## Reductions:

State 63:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr MOD expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> expr MOD expr

State 64:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 65
-- On comment shift to state 59
## Reductions:

State 65:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr DIV expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> expr DIV expr

State 66:
## Known stack suffix:
## expr PIPE
## LR(1) items:
expr -> expr PIPE . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 67
-- On comment shift to state 59
## Reductions:

State 67:
## Known stack suffix:
## expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr PIPE expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DONE DO COMMA
--   reduce production expr -> expr PIPE expr

State 68:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 69
-- On comment shift to state 59
## Reductions:

State 69:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On MOD shift to state 62
-- On DIV shift to state 64
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DONE DO COMMA CMP
--   reduce production expr -> expr MINUS expr

State 70:
## Known stack suffix:
## expr LOGICOR
## LR(1) items:
expr -> expr LOGICOR . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 71
-- On comment shift to state 59
## Reductions:

State 71:
## Known stack suffix:
## expr LOGICOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr LOGICOR expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DONE DO COMMA
--   reduce production expr -> expr LOGICOR expr

State 72:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr -> expr CMP . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 73
-- On comment shift to state 59
## Reductions:

State 73:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr CMP expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On DIV shift to state 64
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DONE DO COMMA
--   reduce production expr -> expr CMP expr

State 74:
## Known stack suffix:
## expr LOGICAND
## LR(1) items:
expr -> expr LOGICAND . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 75
-- On comment shift to state 59
## Reductions:

State 75:
## Known stack suffix:
## expr LOGICAND expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr LOGICAND expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DONE DO COMMA
--   reduce production expr -> expr LOGICAND expr

State 76:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On separated_nonempty_list(COMMA,expr) shift to state 77
-- On ident shift to state 51
-- On expr shift to state 56
-- On comment shift to state 59
## Reductions:

State 77:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 78:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
expr -> ident ASSIGN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 79
-- On comment shift to state 59
## Reductions:

State 79:
## Known stack suffix:
## ident ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> ident ASSIGN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DONE DO COMMA
--   reduce production expr -> ident ASSIGN expr

State 80:
## Known stack suffix:
## DEREF expr
## LR(1) items:
expr -> DEREF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> DEREF expr

State 81:
## Known stack suffix:
## FOR ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> FOR ident EQUAL expr . TO expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TO shift to state 82
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 82:
## Known stack suffix:
## FOR ident EQUAL expr TO
## LR(1) items:
expr -> FOR ident EQUAL expr TO . expr DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 83
-- On comment shift to state 59
## Reductions:

State 83:
## Known stack suffix:
## FOR ident EQUAL expr TO expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> FOR ident EQUAL expr TO expr . DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DO shift to state 84
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 84:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 85
-- On comment shift to state 59
-- On block_core shift to state 88
## Reductions:

State 85:
## Known stack suffix:
## expr
## LR(1) items:
block_core -> expr . [ END DONE ]
block_core -> expr . SEMICOLON block_core [ END DONE ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MOD expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . CMP expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . PIPE expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On SEMICOLON shift to state 86
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On END DONE
--   reduce production block_core -> expr

State 86:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
block_core -> expr SEMICOLON . block_core [ END DONE ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 85
-- On comment shift to state 59
-- On block_core shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## expr SEMICOLON block_core
## LR(1) items:
block_core -> expr SEMICOLON block_core . [ END DONE ]
## Transitions:
## Reductions:
-- On END DONE
--   reduce production block_core -> expr SEMICOLON block_core

State 88:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO block_core
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On DONE shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO block_core DONE
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> FOR ident EQUAL expr TO expr DO block_core DONE

State 90:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> IF expr . THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On THEN shift to state 91
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 91:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On BEGIN shift to state 34
-- On block shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## IF expr THEN block
## LR(1) items:
expr -> IF expr THEN block . ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On ELSE shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## IF expr THEN block ELSE
## LR(1) items:
expr -> IF expr THEN block ELSE . block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On BEGIN shift to state 34
-- On block shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## IF expr THEN block ELSE block
## LR(1) items:
expr -> IF expr THEN block ELSE block . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> IF expr THEN block ELSE block

State 95:
## Known stack suffix:
## LET ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On IN shift to state 96
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 96:
## Known stack suffix:
## LET ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 97
-- On comment shift to state 59
## Reductions:

State 97:
## Known stack suffix:
## LET ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> LET ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DONE DO COMMA
--   reduce production expr -> LET ident EQUAL expr IN expr

State 98:
## Known stack suffix:
## LFLOOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LFLOOR expr . RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On RFLOOR shift to state 99
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 99:
## Known stack suffix:
## LFLOOR expr RFLOOR
## LR(1) items:
expr -> LFLOOR expr RFLOOR . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> LFLOOR expr RFLOOR

State 100:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On RP shift to state 101
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 101:
## Known stack suffix:
## LP expr RP
## LR(1) items:
expr -> LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> LP expr RP

State 102:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> MINUS expr

State 103:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DONE DO COMMA
--   reduce production expr -> NOT expr

State 104:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> REF expr

State 105:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr . DO block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 57
-- On PLUS shift to state 60
-- On PIPE shift to state 66
-- On MOD shift to state 62
-- On MINUS shift to state 68
-- On LOGICOR shift to state 70
-- On LOGICAND shift to state 74
-- On DO shift to state 106
-- On DIV shift to state 64
-- On CMP shift to state 72
## Reductions:

State 106:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
expr -> WHILE expr DO . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On WHILE shift to state 35
-- On REF shift to state 36
-- On NOT shift to state 37
-- On MINUS shift to state 38
-- On LP shift to state 39
-- On LFLOOR shift to state 40
-- On LET shift to state 41
-- On IF shift to state 44
-- On IDENT shift to state 2
-- On FOR shift to state 45
-- On DEREF shift to state 48
-- On CST shift to state 49
-- On COMMENT shift to state 50
-- On ident shift to state 51
-- On expr shift to state 85
-- On comment shift to state 59
-- On block_core shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## WHILE expr DO block_core
## LR(1) items:
expr -> WHILE expr DO block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
-- On DONE shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## WHILE expr DO block_core DONE
## LR(1) items:
expr -> WHILE expr DO block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DONE DO DIV COMMA CMP
--   reduce production expr -> WHILE expr DO block_core DONE

State 109:
## Known stack suffix:
## BEGIN block_core
## LR(1) items:
block -> BEGIN block_core . END [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END ELSE DONE DO DIV COMMA CMP ]
## Transitions:
-- On END shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## BEGIN block_core END
## LR(1) items:
block -> BEGIN block_core END . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END ELSE DONE DO DIV COMMA CMP ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END ELSE DONE DO DIV COMMA CMP
--   reduce production block -> BEGIN block_core END

State 111:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block . [ LET EOF ]
## Transitions:
## Reductions:
-- On LET EOF
--   reduce production def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block

State 112:
## Known stack suffix:
## fun_ret
## LR(1) items:
option(fun_ret) -> fun_ret . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) -> fun_ret

State 113:
## Known stack suffix:
## list(def)
## LR(1) items:
file -> list(def) . EOF [ # ]
## Transitions:
-- On EOF shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## list(def) EOF
## LR(1) items:
file -> list(def) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(def) EOF

State 115:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 116:
## Known stack suffix:
## def
## LR(1) items:
list(def) -> def . list(def) [ EOF ]
## Transitions:
-- On LET shift to state 1
-- On list(def) shift to state 117
-- On def shift to state 116
## Reductions:
-- On EOF
--   reduce production list(def) ->

State 117:
## Known stack suffix:
## def list(def)
## LR(1) items:
list(def) -> def list(def) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(def) -> def list(def)

