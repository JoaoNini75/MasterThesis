State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On SPEC shift to state 1
-- On LET shift to state 2
-- On spec shift to state 160
-- On list(decl) shift to state 161
-- On file shift to state 163
-- On def shift to state 164
-- On decl shift to state 165
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## SPEC
## LR(1) items:
spec -> SPEC . [ WHILE TO TIMES THEN SPEC SEMICOLON RP RFLOOR REF PLUS PIPE NOT MOD MINUS MATCH LP LOGICOR LOGICAND LFLOOR LET IN IF IDENT FOR EOF END DOT DONE DO DIV DEREF CST COMMA CMP CASE ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TO TIMES THEN SPEC SEMICOLON RP RFLOOR REF PLUS PIPE NOT MOD MINUS MATCH LP LOGICOR LOGICAND LFLOOR LET IN IF IDENT FOR EOF END DOT DONE DO DIV DEREF CST COMMA CMP CASE ASSERT
--   reduce production spec -> SPEC

State 2:
## Known stack suffix:
## LET
## LR(1) items:
def -> LET . REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
def -> LET . ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On REC shift to state 3
-- On IDENT shift to state 4
-- On ident shift to state 159
## Reductions:

State 3:
## Known stack suffix:
## LET REC
## LR(1) items:
def -> LET REC . ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WITH TO TIMES THEN STRING SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DOT DONE DO DIV COMMA COLON CMP CASE BOOL ASSIGN ARROW ]
## Transitions:
## Reductions:
-- On WITH TO TIMES THEN STRING SEMICOLON RP RFLOOR PLUS PIPE NONE MOD MINUS LP LOGICOR LOGICAND INT IN EQUAL END DOT DONE DO DIV COMMA COLON CMP CASE BOOL ASSIGN ARROW
--   reduce production ident -> IDENT

State 5:
## Known stack suffix:
## LET REC ident
## LR(1) items:
def -> LET REC ident . LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LET REC ident LP
## LR(1) items:
def -> LET REC ident LP . loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LFLOOR shift to state 7
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,parameter) shift to state 19
-- On parameter_core shift to state 20
-- On parameter shift to state 23
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 26
-- On ident shift to state 10
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 7:
## Known stack suffix:
## LFLOOR
## LR(1) items:
parameter -> LFLOOR . parameter_core RFLOOR [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 4
-- On parameter_core shift to state 8
-- On ident shift to state 10
## Reductions:

State 8:
## Known stack suffix:
## LFLOOR parameter_core
## LR(1) items:
parameter -> LFLOOR parameter_core . RFLOOR [ RP COMMA ]
## Transitions:
-- On RFLOOR shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LFLOOR parameter_core RFLOOR
## LR(1) items:
parameter -> LFLOOR parameter_core RFLOOR . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> LFLOOR parameter_core RFLOOR

State 10:
## Known stack suffix:
## ident
## LR(1) items:
parameter_core -> ident . option(COLON) option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On COLON shift to state 11
-- On option(COLON) shift to state 12
## Reductions:
-- On STRING RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) ->

State 11:
## Known stack suffix:
## COLON
## LR(1) items:
option(COLON) -> COLON . [ STRING RP RFLOOR PIPE NONE INT COMMA BOOL ]
## Transitions:
## Reductions:
-- On STRING RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) -> COLON

State 12:
## Known stack suffix:
## ident option(COLON)
## LR(1) items:
parameter_core -> ident option(COLON) . option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On STRING shift to state 13
-- On NONE shift to state 14
-- On INT shift to state 15
-- On BOOL shift to state 16
-- On option(bip_type) shift to state 17
-- On bip_type shift to state 18
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) ->

State 13:
## Known stack suffix:
## STRING
## LR(1) items:
bip_type -> STRING . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> STRING

State 14:
## Known stack suffix:
## NONE
## LR(1) items:
bip_type -> NONE . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> NONE

State 15:
## Known stack suffix:
## INT
## LR(1) items:
bip_type -> INT . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> INT

State 16:
## Known stack suffix:
## BOOL
## LR(1) items:
bip_type -> BOOL . [ RP RFLOOR PIPE EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE EQUAL COMMA
--   reduce production bip_type -> BOOL

State 17:
## Known stack suffix:
## ident option(COLON) option(bip_type)
## LR(1) items:
parameter_core -> ident option(COLON) option(bip_type) . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production parameter_core -> ident option(COLON) option(bip_type)

State 18:
## Known stack suffix:
## bip_type
## LR(1) items:
option(bip_type) -> bip_type . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) -> bip_type

State 19:
## Known stack suffix:
## separated_nonempty_list(COMMA,parameter)
## LR(1) items:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter)

State 20:
## Known stack suffix:
## parameter_core
## LR(1) items:
parameter -> parameter_core . [ RP COMMA ]
parameter -> parameter_core . PIPE parameter_core [ RP COMMA ]
## Transitions:
-- On PIPE shift to state 21
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core

State 21:
## Known stack suffix:
## parameter_core PIPE
## LR(1) items:
parameter -> parameter_core PIPE . parameter_core [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 4
-- On parameter_core shift to state 22
-- On ident shift to state 10
## Reductions:

State 22:
## Known stack suffix:
## parameter_core PIPE parameter_core
## LR(1) items:
parameter -> parameter_core PIPE parameter_core . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core PIPE parameter_core

State 23:
## Known stack suffix:
## parameter
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RP ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On COMMA shift to state 24
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter

State 24:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On LFLOOR shift to state 7
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,parameter) shift to state 25
-- On parameter_core shift to state 20
-- On parameter shift to state 23
-- On ident shift to state 10
## Reductions:

State 25:
## Known stack suffix:
## parameter COMMA separated_nonempty_list(COMMA,parameter)
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter)

State 26:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) . RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On RP shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP . option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On COLON shift to state 28
-- On option(fun_ret) shift to state 35
-- On fun_ret shift to state 61
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 28:
## Known stack suffix:
## COLON
## LR(1) items:
fun_ret -> COLON . bip_type [ EQUAL ]
fun_ret -> COLON . LFLOOR bip_type RFLOOR [ EQUAL ]
fun_ret -> COLON . bip_type PIPE bip_type [ EQUAL ]
## Transitions:
-- On STRING shift to state 13
-- On NONE shift to state 14
-- On LFLOOR shift to state 29
-- On INT shift to state 15
-- On BOOL shift to state 16
-- On bip_type shift to state 32
## Reductions:

State 29:
## Known stack suffix:
## COLON LFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR . bip_type RFLOOR [ EQUAL ]
## Transitions:
-- On STRING shift to state 13
-- On NONE shift to state 14
-- On INT shift to state 15
-- On BOOL shift to state 16
-- On bip_type shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## COLON LFLOOR bip_type
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type . RFLOOR [ EQUAL ]
## Transitions:
-- On RFLOOR shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## COLON LFLOOR bip_type RFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR bip_type RFLOOR . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON LFLOOR bip_type RFLOOR

State 32:
## Known stack suffix:
## COLON bip_type
## LR(1) items:
fun_ret -> COLON bip_type . [ EQUAL ]
fun_ret -> COLON bip_type . PIPE bip_type [ EQUAL ]
## Transitions:
-- On PIPE shift to state 33
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type

State 33:
## Known stack suffix:
## COLON bip_type PIPE
## LR(1) items:
fun_ret -> COLON bip_type PIPE . bip_type [ EQUAL ]
## Transitions:
-- On STRING shift to state 13
-- On NONE shift to state 14
-- On INT shift to state 15
-- On BOOL shift to state 16
-- On bip_type shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## COLON bip_type PIPE bip_type
## LR(1) items:
fun_ret -> COLON bip_type PIPE bip_type . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON bip_type PIPE bip_type

State 35:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret)
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) . EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL . block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 37
-- On block shift to state 157
## Reductions:

State 37:
## Known stack suffix:
## BEGIN
## LR(1) items:
block -> BEGIN . block_core END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 109
-- On def shift to state 79
-- On block_core shift to state 155
## Reductions:

State 38:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> WHILE . expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 140
-- On def shift to state 79
## Reductions:

State 39:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 139
-- On def shift to state 79
## Reductions:

State 40:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 138
-- On def shift to state 79
## Reductions:

State 41:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 137
-- On def shift to state 79
## Reductions:

State 42:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . ident WITH case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## MATCH ident
## LR(1) items:
expr -> MATCH ident . WITH case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WITH shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## MATCH ident WITH
## LR(1) items:
expr -> MATCH ident WITH . case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 45
-- On case_list shift to state 134
-- On case shift to state 136
## Reductions:

State 45:
## Known stack suffix:
## CASE
## LR(1) items:
case -> CASE . pattern ARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WILDCARD shift to state 46
-- On IDENT shift to state 4
-- On CST shift to state 47
-- On pattern shift to state 48
-- On ident shift to state 133
## Reductions:

State 46:
## Known stack suffix:
## WILDCARD
## LR(1) items:
pattern -> WILDCARD . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> WILDCARD

State 47:
## Known stack suffix:
## CST
## LR(1) items:
pattern -> CST . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> CST

State 48:
## Known stack suffix:
## CASE pattern
## LR(1) items:
case -> CASE pattern . ARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On ARROW shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## CASE pattern ARROW
## LR(1) items:
case -> CASE pattern ARROW . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 132
-- On def shift to state 79
## Reductions:

State 50:
## Known stack suffix:
## LP
## LR(1) items:
expr -> LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 130
-- On def shift to state 79
## Reductions:

State 51:
## Known stack suffix:
## LFLOOR
## LR(1) items:
expr -> LFLOOR . expr RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 128
-- On def shift to state 79
## Reductions:

State 52:
## Known stack suffix:
## LET
## LR(1) items:
def -> LET . REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
def -> LET . ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET . ident EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On REC shift to state 3
-- On IDENT shift to state 4
-- On ident shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LET ident
## LR(1) items:
def -> LET ident . LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident . EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 54
-- On EQUAL shift to state 62
## Reductions:

State 54:
## Known stack suffix:
## LET ident LP
## LR(1) items:
def -> LET ident LP . loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LFLOOR shift to state 7
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,parameter) shift to state 19
-- On parameter_core shift to state 20
-- On parameter shift to state 23
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 55
-- On ident shift to state 10
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 55:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) . RP option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On RP shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP . option(fun_ret) EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On COLON shift to state 28
-- On option(fun_ret) shift to state 57
-- On fun_ret shift to state 61
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 57:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret)
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) . EQUAL block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL . block spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 37
-- On block shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block . spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec . [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE
--   reduce production def -> LET ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec

State 61:
## Known stack suffix:
## fun_ret
## LR(1) items:
option(fun_ret) -> fun_ret . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) -> fun_ret

State 62:
## Known stack suffix:
## LET ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL . expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 119
-- On def shift to state 79
## Reductions:

State 63:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 114
-- On def shift to state 79
## Reductions:

State 64:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . ident EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## FOR ident
## LR(1) items:
expr -> FOR ident . EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## FOR ident EQUAL
## LR(1) items:
expr -> FOR ident EQUAL . expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 103
-- On def shift to state 79
## Reductions:

State 67:
## Known stack suffix:
## DEREF
## LR(1) items:
expr -> DEREF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 102
-- On def shift to state 79
## Reductions:

State 68:
## Known stack suffix:
## CST
## LR(1) items:
expr -> CST . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> CST

State 69:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . LP expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## ASSERT LP
## LR(1) items:
expr -> ASSERT LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 100
-- On def shift to state 79
## Reductions:

State 71:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . ASSIGN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 72
-- On ASSIGN shift to state 98
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident

State 72:
## Known stack suffix:
## ident LP
## LR(1) items:
expr -> ident LP . loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On separated_nonempty_list(COMMA,expr) shift to state 73
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 74
-- On ident shift to state 71
-- On expr shift to state 76
-- On def shift to state 79
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 73:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 74:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On RP shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP

State 76:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
separated_nonempty_list(COMMA,expr) -> expr . [ RP ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On COMMA shift to state 96
-- On CMP shift to state 92
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 77:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 78
-- On def shift to state 79
## Reductions:

State 78:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr TIMES expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr TIMES expr

State 79:
## Known stack suffix:
## def
## LR(1) items:
expr -> def . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> def

State 80:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 81
-- On def shift to state 79
## Reductions:

State 81:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PLUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On MOD shift to state 82
-- On DIV shift to state 84
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DOT DONE DO COMMA CMP CASE
--   reduce production expr -> expr PLUS expr

State 82:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 83
-- On def shift to state 79
## Reductions:

State 83:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr MOD expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr MOD expr

State 84:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 85
-- On def shift to state 79
## Reductions:

State 85:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr DIV expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr DIV expr

State 86:
## Known stack suffix:
## expr PIPE
## LR(1) items:
expr -> expr PIPE . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 87
-- On def shift to state 79
## Reductions:

State 87:
## Known stack suffix:
## expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DOT DONE DO COMMA CASE
--   reduce production expr -> expr PIPE expr

State 88:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 89
-- On def shift to state 79
## Reductions:

State 89:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On MOD shift to state 82
-- On DIV shift to state 84
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN END DOT DONE DO COMMA CMP CASE
--   reduce production expr -> expr MINUS expr

State 90:
## Known stack suffix:
## expr LOGICOR
## LR(1) items:
expr -> expr LOGICOR . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 91
-- On def shift to state 79
## Reductions:

State 91:
## Known stack suffix:
## expr LOGICOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr LOGICOR expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA CASE
--   reduce production expr -> expr LOGICOR expr

State 92:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr -> expr CMP . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 93
-- On def shift to state 79
## Reductions:

State 93:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr CMP expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On DIV shift to state 84
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA CASE
--   reduce production expr -> expr CMP expr

State 94:
## Known stack suffix:
## expr LOGICAND
## LR(1) items:
expr -> expr LOGICAND . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 95
-- On def shift to state 79
## Reductions:

State 95:
## Known stack suffix:
## expr LOGICAND expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr LOGICAND expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA CASE
--   reduce production expr -> expr LOGICAND expr

State 96:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On separated_nonempty_list(COMMA,expr) shift to state 97
-- On ident shift to state 71
-- On expr shift to state 76
-- On def shift to state 79
## Reductions:

State 97:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 98:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
expr -> ident ASSIGN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 99
-- On def shift to state 79
## Reductions:

State 99:
## Known stack suffix:
## ident ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident ASSIGN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN END DOT DONE DO COMMA CASE
--   reduce production expr -> ident ASSIGN expr

State 100:
## Known stack suffix:
## ASSERT LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> ASSERT LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On RP shift to state 101
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 101:
## Known stack suffix:
## ASSERT LP expr RP
## LR(1) items:
expr -> ASSERT LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ASSERT LP expr RP

State 102:
## Known stack suffix:
## DEREF expr
## LR(1) items:
expr -> DEREF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> DEREF expr

State 103:
## Known stack suffix:
## FOR ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> FOR ident EQUAL expr . TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TO shift to state 104
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 104:
## Known stack suffix:
## FOR ident EQUAL expr TO
## LR(1) items:
expr -> FOR ident EQUAL expr TO . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 105
-- On def shift to state 79
## Reductions:

State 105:
## Known stack suffix:
## FOR ident EQUAL expr TO expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> FOR ident EQUAL expr TO expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DO shift to state 106
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 106:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 107
-- On option(spec) shift to state 108
## Reductions:
-- On WHILE REF NOT MINUS MATCH LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 107:
## Known stack suffix:
## spec
## LR(1) items:
option(spec) -> spec . [ WHILE REF NOT MINUS MATCH LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT ]
## Transitions:
## Reductions:
-- On WHILE REF NOT MINUS MATCH LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) -> spec

State 108:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec)
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 109
-- On def shift to state 79
-- On block_core shift to state 112
## Reductions:

State 109:
## Known stack suffix:
## expr
## LR(1) items:
block_core -> expr . [ END DONE ]
block_core -> expr . SEMICOLON block_core [ END DONE ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MOD expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . CMP expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . PIPE expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On SEMICOLON shift to state 110
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On END DONE
--   reduce production block_core -> expr

State 110:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
block_core -> expr SEMICOLON . block_core [ END DONE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 109
-- On def shift to state 79
-- On block_core shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## expr SEMICOLON block_core
## LR(1) items:
block_core -> expr SEMICOLON block_core . [ END DONE ]
## Transitions:
## Reductions:
-- On END DONE
--   reduce production block_core -> expr SEMICOLON block_core

State 112:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core DONE
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE

State 114:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> IF expr . THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On THEN shift to state 115
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 115:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 37
-- On block shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## IF expr THEN block
## LR(1) items:
expr -> IF expr THEN block . ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On ELSE shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## IF expr THEN block ELSE
## LR(1) items:
expr -> IF expr THEN block ELSE . block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 37
-- On block shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## IF expr THEN block ELSE block
## LR(1) items:
expr -> IF expr THEN block ELSE block . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> IF expr THEN block ELSE block

State 119:
## Known stack suffix:
## LET ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr . PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 120
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On IN shift to state 126
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 120:
## Known stack suffix:
## LET ident EQUAL expr PIPE
## LR(1) items:
expr -> LET ident EQUAL expr PIPE . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 121
-- On expr shift to state 87
-- On def shift to state 79
## Reductions:

State 121:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident
## LR(1) items:
expr -> ident . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . ASSIGN expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On LP shift to state 72
-- On EQUAL shift to state 122
-- On ASSIGN shift to state 98
## Reductions:
-- On TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP
--   reduce production expr -> ident

State 122:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 123
-- On def shift to state 79
## Reductions:

State 123:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On IN shift to state 124
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 124:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 125
-- On def shift to state 79
## Reductions:

State 125:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DOT DONE DO COMMA CASE
--   reduce production expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr

State 126:
## Known stack suffix:
## LET ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 127
-- On def shift to state 79
## Reductions:

State 127:
## Known stack suffix:
## LET ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DOT DONE DO COMMA CASE
--   reduce production expr -> LET ident EQUAL expr IN expr

State 128:
## Known stack suffix:
## LFLOOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LFLOOR expr . RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On RFLOOR shift to state 129
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 129:
## Known stack suffix:
## LFLOOR expr RFLOOR
## LR(1) items:
expr -> LFLOOR expr RFLOOR . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LFLOOR expr RFLOOR

State 130:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On RP shift to state 131
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 131:
## Known stack suffix:
## LP expr RP
## LR(1) items:
expr -> LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LP expr RP

State 132:
## Known stack suffix:
## CASE pattern ARROW expr
## LR(1) items:
case -> CASE pattern ARROW expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 86
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN END DOT DONE DO COMMA CASE
--   reduce production case -> CASE pattern ARROW expr

State 133:
## Known stack suffix:
## ident
## LR(1) items:
pattern -> ident . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> ident

State 134:
## Known stack suffix:
## MATCH ident WITH case_list
## LR(1) items:
case_list -> case_list . case [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> MATCH ident WITH case_list . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 45
-- On case shift to state 135
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> MATCH ident WITH case_list

State 135:
## Known stack suffix:
## case_list case
## LR(1) items:
case_list -> case_list case . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production case_list -> case_list case

State 136:
## Known stack suffix:
## case
## LR(1) items:
case_list -> case . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production case_list -> case

State 137:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> MINUS expr

State 138:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN END DOT DONE DO COMMA CASE
--   reduce production expr -> NOT expr

State 139:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> REF expr

State 140:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> WHILE expr . PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 141
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DO shift to state 151
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 141:
## Known stack suffix:
## WHILE expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE . expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 142
-- On def shift to state 79
## Reductions:

State 142:
## Known stack suffix:
## WHILE expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> WHILE expr PIPE expr . DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DOT shift to state 143
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On PIPE DO
--   reduce production expr -> expr PIPE expr

State 143:
## Known stack suffix:
## WHILE expr PIPE expr DOT
## LR(1) items:
expr -> WHILE expr PIPE expr DOT . expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 144
-- On def shift to state 79
## Reductions:

State 144:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr . PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On PIPE shift to state 145
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:

State 145:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 146
-- On def shift to state 79
## Reductions:

State 146:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr PIPE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 77
-- On PLUS shift to state 80
-- On MOD shift to state 82
-- On MINUS shift to state 88
-- On LOGICOR shift to state 90
-- On LOGICAND shift to state 94
-- On DO shift to state 147
-- On DIV shift to state 84
-- On CMP shift to state 92
## Reductions:
-- On PIPE
--   reduce production expr -> expr PIPE expr

State 147:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 107
-- On option(spec) shift to state 148
## Reductions:
-- On WHILE REF NOT MINUS MATCH LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 148:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 109
-- On def shift to state 79
-- On block_core shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE

State 151:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
expr -> WHILE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 107
-- On option(spec) shift to state 152
## Reductions:
-- On WHILE REF NOT MINUS MATCH LP LFLOOR LET IF IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 152:
## Known stack suffix:
## WHILE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 38
-- On REF shift to state 39
-- On NOT shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LP shift to state 50
-- On LFLOOR shift to state 51
-- On LET shift to state 52
-- On IF shift to state 63
-- On IDENT shift to state 4
-- On FOR shift to state 64
-- On DEREF shift to state 67
-- On CST shift to state 68
-- On ASSERT shift to state 69
-- On ident shift to state 71
-- On expr shift to state 109
-- On def shift to state 79
-- On block_core shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## WHILE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## WHILE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> WHILE expr DO option(spec) block_core DONE

State 155:
## Known stack suffix:
## BEGIN block_core
## LR(1) items:
block -> BEGIN block_core . END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On END shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## BEGIN block_core END
## LR(1) items:
block -> BEGIN block_core END . [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN END ELSE DOT DONE DO DIV COMMA CMP CASE
--   reduce production block -> BEGIN block_core END

State 157:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block . spec [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 1
-- On spec shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec
## LR(1) items:
def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec . [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND LET IN EOF END DOT DONE DO DIV COMMA CMP CASE
--   reduce production def -> LET REC ident LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec

State 159:
## Known stack suffix:
## LET ident
## LR(1) items:
def -> LET ident . LP loption(separated_nonempty_list(COMMA,parameter)) RP option(fun_ret) EQUAL block spec [ SPEC LET EOF ]
## Transitions:
-- On LP shift to state 54
## Reductions:

State 160:
## Known stack suffix:
## spec
## LR(1) items:
decl -> spec . [ SPEC LET EOF ]
## Transitions:
## Reductions:
-- On SPEC LET EOF
--   reduce production decl -> spec

State 161:
## Known stack suffix:
## list(decl)
## LR(1) items:
file -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
file -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(decl) EOF

State 163:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 164:
## Known stack suffix:
## def
## LR(1) items:
decl -> def . [ SPEC LET EOF ]
## Transitions:
## Reductions:
-- On SPEC LET EOF
--   reduce production decl -> def

State 165:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On SPEC shift to state 1
-- On LET shift to state 2
-- On spec shift to state 160
-- On list(decl) shift to state 166
-- On def shift to state 164
-- On decl shift to state 165
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 166:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

