State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On TYPE shift to state 1
-- On SPEC shift to state 31
-- On OPEN shift to state 32
-- On LET shift to state 34
-- On INCLUDE shift to state 243
-- On type_def shift to state 245
-- On spec shift to state 246
-- On list(decl) shift to state 247
-- On file shift to state 249
-- On def_outer shift to state 250
-- On decl shift to state 251
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## TYPE
## LR(1) items:
type_def -> TYPE . type_def_core [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On type_def_core shift to state 3
-- On ident shift to state 4
## Reductions:

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WITH UNIT TYPE TO TIMES THEN STRING SPEC SEMICOLON RP RFLOOR PLUS PIPE OPEN NONE MOD MINUS LP LOGICOR LOGICAND LET INT INCLUDE IN EQUAL EOF END DOT DONE DO DIV COMMA COLON CMP CASE BOOL ASSIGN ARROW AND ]
## Transitions:
## Reductions:
-- On WITH UNIT TYPE TO TIMES THEN STRING SPEC SEMICOLON RP RFLOOR PLUS PIPE OPEN NONE MOD MINUS LP LOGICOR LOGICAND LET INT INCLUDE IN EQUAL EOF END DOT DONE DO DIV COMMA COLON CMP CASE BOOL ASSIGN ARROW AND
--   reduce production ident -> IDENT

State 3:
## Known stack suffix:
## TYPE type_def_core
## LR(1) items:
type_def -> TYPE type_def_core . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production type_def -> TYPE type_def_core

State 4:
## Known stack suffix:
## ident
## LR(1) items:
type_def_core -> ident . EQUAL payload option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
type_def_core -> ident . EQUAL CASE separated_nonempty_list(CASE,constructor) option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On EQUAL shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## ident EQUAL
## LR(1) items:
type_def_core -> ident EQUAL . payload option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
type_def_core -> ident EQUAL . CASE separated_nonempty_list(CASE,constructor) option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On CASE shift to state 9
-- On BOOL shift to state 18
-- On separated_nonempty_list(TIMES,payload_elem) shift to state 19
-- On payload_elem shift to state 20
-- On payload shift to state 29
-- On ident shift to state 23
-- On bip_type shift to state 24
## Reductions:

State 6:
## Known stack suffix:
## STRING
## LR(1) items:
bip_type -> STRING . [ TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND
--   reduce production bip_type -> STRING

State 7:
## Known stack suffix:
## NONE
## LR(1) items:
bip_type -> NONE . [ TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND
--   reduce production bip_type -> NONE

State 8:
## Known stack suffix:
## INT
## LR(1) items:
bip_type -> INT . [ TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND
--   reduce production bip_type -> INT

State 9:
## Known stack suffix:
## ident EQUAL CASE
## LR(1) items:
type_def_core -> ident EQUAL CASE . separated_nonempty_list(CASE,constructor) option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT_CAP shift to state 10
-- On separated_nonempty_list(CASE,constructor) shift to state 11
-- On ident_cap shift to state 16
-- On constructor shift to state 26
## Reductions:

State 10:
## Known stack suffix:
## IDENT_CAP
## LR(1) items:
ident_cap -> IDENT_CAP . [ TYPE TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE OPEN OF MOD MINUS LP LOGICOR LOGICAND LET INCLUDE IN IDENT EQUAL EOF END DOT DONE DO DIV COMMA CMP CASE ARROW AND ]
## Transitions:
## Reductions:
-- On TYPE TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE OPEN OF MOD MINUS LP LOGICOR LOGICAND LET INCLUDE IN IDENT EQUAL EOF END DOT DONE DO DIV COMMA CMP CASE ARROW AND
--   reduce production ident_cap -> IDENT_CAP

State 11:
## Known stack suffix:
## ident EQUAL CASE separated_nonempty_list(CASE,constructor)
## LR(1) items:
type_def_core -> ident EQUAL CASE separated_nonempty_list(CASE,constructor) . option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On AND shift to state 12
-- On option(and_type_def) shift to state 14
-- On and_type_def shift to state 15
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production option(and_type_def) ->

State 12:
## Known stack suffix:
## AND
## LR(1) items:
and_type_def -> AND . type_def_core [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On type_def_core shift to state 13
-- On ident shift to state 4
## Reductions:

State 13:
## Known stack suffix:
## AND type_def_core
## LR(1) items:
and_type_def -> AND type_def_core . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production and_type_def -> AND type_def_core

State 14:
## Known stack suffix:
## ident EQUAL CASE separated_nonempty_list(CASE,constructor) option(and_type_def)
## LR(1) items:
type_def_core -> ident EQUAL CASE separated_nonempty_list(CASE,constructor) option(and_type_def) . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production type_def_core -> ident EQUAL CASE separated_nonempty_list(CASE,constructor) option(and_type_def)

State 15:
## Known stack suffix:
## and_type_def
## LR(1) items:
option(and_type_def) -> and_type_def . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production option(and_type_def) -> and_type_def

State 16:
## Known stack suffix:
## ident_cap
## LR(1) items:
constructor -> ident_cap . OF payload [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
constructor -> ident_cap . [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
-- On OF shift to state 17
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production constructor -> ident_cap

State 17:
## Known stack suffix:
## ident_cap OF
## LR(1) items:
constructor -> ident_cap OF . payload [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On BOOL shift to state 18
-- On separated_nonempty_list(TIMES,payload_elem) shift to state 19
-- On payload_elem shift to state 20
-- On payload shift to state 25
-- On ident shift to state 23
-- On bip_type shift to state 24
## Reductions:

State 18:
## Known stack suffix:
## BOOL
## LR(1) items:
bip_type -> BOOL . [ TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC RP RFLOOR PIPE OPEN LET INCLUDE EQUAL EOF COMMA CASE AND
--   reduce production bip_type -> BOOL

State 19:
## Known stack suffix:
## separated_nonempty_list(TIMES,payload_elem)
## LR(1) items:
payload -> separated_nonempty_list(TIMES,payload_elem) . [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production payload -> separated_nonempty_list(TIMES,payload_elem)

State 20:
## Known stack suffix:
## payload_elem
## LR(1) items:
separated_nonempty_list(TIMES,payload_elem) -> payload_elem . [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
separated_nonempty_list(TIMES,payload_elem) -> payload_elem . TIMES separated_nonempty_list(TIMES,payload_elem) [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
-- On TIMES shift to state 21
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production separated_nonempty_list(TIMES,payload_elem) -> payload_elem

State 21:
## Known stack suffix:
## payload_elem TIMES
## LR(1) items:
separated_nonempty_list(TIMES,payload_elem) -> payload_elem TIMES . separated_nonempty_list(TIMES,payload_elem) [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On BOOL shift to state 18
-- On separated_nonempty_list(TIMES,payload_elem) shift to state 22
-- On payload_elem shift to state 20
-- On ident shift to state 23
-- On bip_type shift to state 24
## Reductions:

State 22:
## Known stack suffix:
## payload_elem TIMES separated_nonempty_list(TIMES,payload_elem)
## LR(1) items:
separated_nonempty_list(TIMES,payload_elem) -> payload_elem TIMES separated_nonempty_list(TIMES,payload_elem) . [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production separated_nonempty_list(TIMES,payload_elem) -> payload_elem TIMES separated_nonempty_list(TIMES,payload_elem)

State 23:
## Known stack suffix:
## ident
## LR(1) items:
payload_elem -> ident . [ TYPE TIMES SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production payload_elem -> ident

State 24:
## Known stack suffix:
## bip_type
## LR(1) items:
payload_elem -> bip_type . [ TYPE TIMES SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
## Reductions:
-- On TYPE TIMES SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production payload_elem -> bip_type

State 25:
## Known stack suffix:
## ident_cap OF payload
## LR(1) items:
constructor -> ident_cap OF payload . [ TYPE SPEC OPEN LET INCLUDE EOF CASE AND ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF CASE AND
--   reduce production constructor -> ident_cap OF payload

State 26:
## Known stack suffix:
## constructor
## LR(1) items:
separated_nonempty_list(CASE,constructor) -> constructor . [ TYPE SPEC OPEN LET INCLUDE EOF AND ]
separated_nonempty_list(CASE,constructor) -> constructor . CASE separated_nonempty_list(CASE,constructor) [ TYPE SPEC OPEN LET INCLUDE EOF AND ]
## Transitions:
-- On CASE shift to state 27
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF AND
--   reduce production separated_nonempty_list(CASE,constructor) -> constructor

State 27:
## Known stack suffix:
## constructor CASE
## LR(1) items:
separated_nonempty_list(CASE,constructor) -> constructor CASE . separated_nonempty_list(CASE,constructor) [ TYPE SPEC OPEN LET INCLUDE EOF AND ]
## Transitions:
-- On IDENT_CAP shift to state 10
-- On separated_nonempty_list(CASE,constructor) shift to state 28
-- On ident_cap shift to state 16
-- On constructor shift to state 26
## Reductions:

State 28:
## Known stack suffix:
## constructor CASE separated_nonempty_list(CASE,constructor)
## LR(1) items:
separated_nonempty_list(CASE,constructor) -> constructor CASE separated_nonempty_list(CASE,constructor) . [ TYPE SPEC OPEN LET INCLUDE EOF AND ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF AND
--   reduce production separated_nonempty_list(CASE,constructor) -> constructor CASE separated_nonempty_list(CASE,constructor)

State 29:
## Known stack suffix:
## ident EQUAL payload
## LR(1) items:
type_def_core -> ident EQUAL payload . option(and_type_def) [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On AND shift to state 12
-- On option(and_type_def) shift to state 30
-- On and_type_def shift to state 15
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production option(and_type_def) ->

State 30:
## Known stack suffix:
## ident EQUAL payload option(and_type_def)
## LR(1) items:
type_def_core -> ident EQUAL payload option(and_type_def) . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production type_def_core -> ident EQUAL payload option(and_type_def)

State 31:
## Known stack suffix:
## SPEC
## LR(1) items:
spec -> SPEC . [ WHILE UNIT TYPE SPEC REF OPEN NOT MINUS MATCH LSQBR LP LFLOOR LET INCLUDE IN IF IDENT_CAP IDENT FOR EOF DEREF CST ASSERT ]
## Transitions:
## Reductions:
-- On WHILE UNIT TYPE SPEC REF OPEN NOT MINUS MATCH LSQBR LP LFLOOR LET INCLUDE IN IF IDENT_CAP IDENT FOR EOF DEREF CST ASSERT
--   reduce production spec -> SPEC

State 32:
## Known stack suffix:
## OPEN
## LR(1) items:
decl -> OPEN . ident_cap [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT_CAP shift to state 10
-- On ident_cap shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## OPEN ident_cap
## LR(1) items:
decl -> OPEN ident_cap . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production decl -> OPEN ident_cap

State 34:
## Known stack suffix:
## LET
## LR(1) items:
def_outer -> LET . REC ident param_list option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
def_outer -> LET . ident param_list option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On REC shift to state 35
-- On IDENT shift to state 2
-- On ident shift to state 237
## Reductions:

State 35:
## Known stack suffix:
## LET REC
## LR(1) items:
def_outer -> LET REC . ident param_list option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LET REC ident
## LR(1) items:
def_outer -> LET REC ident . param_list option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On UNIT shift to state 37
-- On LP shift to state 38
-- On param_list shift to state 56
## Reductions:

State 37:
## Known stack suffix:
## UNIT
## LR(1) items:
param_list -> UNIT . [ EQUAL COLON ]
## Transitions:
## Reductions:
-- On EQUAL COLON
--   reduce production param_list -> UNIT

State 38:
## Known stack suffix:
## LP
## LR(1) items:
param_list -> LP . loption(separated_nonempty_list(COMMA,parameter)) RP [ EQUAL COLON ]
## Transitions:
-- On LFLOOR shift to state 39
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,parameter) shift to state 47
-- On parameter_core shift to state 48
-- On parameter shift to state 51
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 54
-- On ident shift to state 42
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 39:
## Known stack suffix:
## LFLOOR
## LR(1) items:
parameter -> LFLOOR . parameter_core RFLOOR [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 2
-- On parameter_core shift to state 40
-- On ident shift to state 42
## Reductions:

State 40:
## Known stack suffix:
## LFLOOR parameter_core
## LR(1) items:
parameter -> LFLOOR parameter_core . RFLOOR [ RP COMMA ]
## Transitions:
-- On RFLOOR shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## LFLOOR parameter_core RFLOOR
## LR(1) items:
parameter -> LFLOOR parameter_core RFLOOR . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> LFLOOR parameter_core RFLOOR

State 42:
## Known stack suffix:
## ident
## LR(1) items:
parameter_core -> ident . option(COLON) option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On COLON shift to state 43
-- On option(COLON) shift to state 44
## Reductions:
-- On STRING RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) ->

State 43:
## Known stack suffix:
## COLON
## LR(1) items:
option(COLON) -> COLON . [ STRING RP RFLOOR PIPE NONE INT COMMA BOOL ]
## Transitions:
## Reductions:
-- On STRING RP RFLOOR PIPE NONE INT COMMA BOOL
--   reduce production option(COLON) -> COLON

State 44:
## Known stack suffix:
## ident option(COLON)
## LR(1) items:
parameter_core -> ident option(COLON) . option(bip_type) [ RP RFLOOR PIPE COMMA ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On BOOL shift to state 18
-- On option(bip_type) shift to state 45
-- On bip_type shift to state 46
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) ->

State 45:
## Known stack suffix:
## ident option(COLON) option(bip_type)
## LR(1) items:
parameter_core -> ident option(COLON) option(bip_type) . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production parameter_core -> ident option(COLON) option(bip_type)

State 46:
## Known stack suffix:
## bip_type
## LR(1) items:
option(bip_type) -> bip_type . [ RP RFLOOR PIPE COMMA ]
## Transitions:
## Reductions:
-- On RP RFLOOR PIPE COMMA
--   reduce production option(bip_type) -> bip_type

State 47:
## Known stack suffix:
## separated_nonempty_list(COMMA,parameter)
## LR(1) items:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter)

State 48:
## Known stack suffix:
## parameter_core
## LR(1) items:
parameter -> parameter_core . [ RP COMMA ]
parameter -> parameter_core . PIPE parameter_core [ RP COMMA ]
## Transitions:
-- On PIPE shift to state 49
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core

State 49:
## Known stack suffix:
## parameter_core PIPE
## LR(1) items:
parameter -> parameter_core PIPE . parameter_core [ RP COMMA ]
## Transitions:
-- On IDENT shift to state 2
-- On parameter_core shift to state 50
-- On ident shift to state 42
## Reductions:

State 50:
## Known stack suffix:
## parameter_core PIPE parameter_core
## LR(1) items:
parameter -> parameter_core PIPE parameter_core . [ RP COMMA ]
## Transitions:
## Reductions:
-- On RP COMMA
--   reduce production parameter -> parameter_core PIPE parameter_core

State 51:
## Known stack suffix:
## parameter
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RP ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On COMMA shift to state 52
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter

State 52:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RP ]
## Transitions:
-- On LFLOOR shift to state 39
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,parameter) shift to state 53
-- On parameter_core shift to state 48
-- On parameter shift to state 51
-- On ident shift to state 42
## Reductions:

State 53:
## Known stack suffix:
## parameter COMMA separated_nonempty_list(COMMA,parameter)
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter)

State 54:
## Known stack suffix:
## LP loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
param_list -> LP loption(separated_nonempty_list(COMMA,parameter)) . RP [ EQUAL COLON ]
## Transitions:
-- On RP shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LP loption(separated_nonempty_list(COMMA,parameter)) RP
## LR(1) items:
param_list -> LP loption(separated_nonempty_list(COMMA,parameter)) RP . [ EQUAL COLON ]
## Transitions:
## Reductions:
-- On EQUAL COLON
--   reduce production param_list -> LP loption(separated_nonempty_list(COMMA,parameter)) RP

State 56:
## Known stack suffix:
## LET REC ident param_list
## LR(1) items:
def_outer -> LET REC ident param_list . option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On COLON shift to state 57
-- On option(fun_ret) shift to state 66
-- On fun_ret shift to state 175
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 57:
## Known stack suffix:
## COLON
## LR(1) items:
fun_ret -> COLON . ret_type [ EQUAL ]
fun_ret -> COLON . LFLOOR ret_type RFLOOR [ EQUAL ]
fun_ret -> COLON . ret_type PIPE ret_type [ EQUAL ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On LFLOOR shift to state 58
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On BOOL shift to state 18
-- On ret_type shift to state 63
-- On ident shift to state 61
-- On bip_type shift to state 62
## Reductions:

State 58:
## Known stack suffix:
## COLON LFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR . ret_type RFLOOR [ EQUAL ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On BOOL shift to state 18
-- On ret_type shift to state 59
-- On ident shift to state 61
-- On bip_type shift to state 62
## Reductions:

State 59:
## Known stack suffix:
## COLON LFLOOR ret_type
## LR(1) items:
fun_ret -> COLON LFLOOR ret_type . RFLOOR [ EQUAL ]
## Transitions:
-- On RFLOOR shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## COLON LFLOOR ret_type RFLOOR
## LR(1) items:
fun_ret -> COLON LFLOOR ret_type RFLOOR . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON LFLOOR ret_type RFLOOR

State 61:
## Known stack suffix:
## ident
## LR(1) items:
ret_type -> ident . [ RFLOOR PIPE EQUAL ]
## Transitions:
## Reductions:
-- On RFLOOR PIPE EQUAL
--   reduce production ret_type -> ident

State 62:
## Known stack suffix:
## bip_type
## LR(1) items:
ret_type -> bip_type . [ RFLOOR PIPE EQUAL ]
## Transitions:
## Reductions:
-- On RFLOOR PIPE EQUAL
--   reduce production ret_type -> bip_type

State 63:
## Known stack suffix:
## COLON ret_type
## LR(1) items:
fun_ret -> COLON ret_type . [ EQUAL ]
fun_ret -> COLON ret_type . PIPE ret_type [ EQUAL ]
## Transitions:
-- On PIPE shift to state 64
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON ret_type

State 64:
## Known stack suffix:
## COLON ret_type PIPE
## LR(1) items:
fun_ret -> COLON ret_type PIPE . ret_type [ EQUAL ]
## Transitions:
-- On STRING shift to state 6
-- On NONE shift to state 7
-- On INT shift to state 8
-- On IDENT shift to state 2
-- On BOOL shift to state 18
-- On ret_type shift to state 65
-- On ident shift to state 61
-- On bip_type shift to state 62
## Reductions:

State 65:
## Known stack suffix:
## COLON ret_type PIPE ret_type
## LR(1) items:
fun_ret -> COLON ret_type PIPE ret_type . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production fun_ret -> COLON ret_type PIPE ret_type

State 66:
## Known stack suffix:
## LET REC ident param_list option(fun_ret)
## LR(1) items:
def_outer -> LET REC ident param_list option(fun_ret) . EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On EQUAL shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL
## LR(1) items:
def_outer -> LET REC ident param_list option(fun_ret) EQUAL . block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 235
## Reductions:

State 68:
## Known stack suffix:
## BEGIN
## LR(1) items:
block -> BEGIN . block_core END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 164
-- On def_inner shift to state 119
-- On block_core shift to state 233
## Reductions:

State 69:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> WHILE . expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 218
-- On def_inner shift to state 119
## Reductions:

State 70:
## Known stack suffix:
## UNIT
## LR(1) items:
expr -> UNIT . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> UNIT

State 71:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 217
-- On def_inner shift to state 119
## Reductions:

State 72:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 216
-- On def_inner shift to state 119
## Reductions:

State 73:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 215
-- On def_inner shift to state 119
## Reductions:

State 74:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . ident WITH case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## MATCH ident
## LR(1) items:
expr -> MATCH ident . WITH case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WITH shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## MATCH ident WITH
## LR(1) items:
expr -> MATCH ident WITH . case_list [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 77
-- On case_list shift to state 212
-- On case shift to state 214
## Reductions:

State 77:
## Known stack suffix:
## CASE
## LR(1) items:
case -> CASE . pattern ARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WILDCARD shift to state 78
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On CST shift to state 79
-- On pattern shift to state 80
-- On ident_cap shift to state 209
-- On ident shift to state 211
## Reductions:

State 78:
## Known stack suffix:
## WILDCARD
## LR(1) items:
pattern -> WILDCARD . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> WILDCARD

State 79:
## Known stack suffix:
## CST
## LR(1) items:
pattern -> CST . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> CST

State 80:
## Known stack suffix:
## CASE pattern
## LR(1) items:
case -> CASE pattern . ARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On ARROW shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## CASE pattern ARROW
## LR(1) items:
case -> CASE pattern ARROW . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 208
-- On def_inner shift to state 119
## Reductions:

State 82:
## Known stack suffix:
## LSQBR
## LR(1) items:
expr -> LSQBR . CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE RSQBR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## LSQBR CASE
## LR(1) items:
expr -> LSQBR CASE . loption(separated_nonempty_list(SEMICOLON,expr)) CASE RSQBR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On separated_nonempty_list(SEMICOLON,expr) shift to state 201
-- On loption(separated_nonempty_list(SEMICOLON,expr)) shift to state 202
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 205
-- On def_inner shift to state 119
## Reductions:
-- On CASE
--   reduce production loption(separated_nonempty_list(SEMICOLON,expr)) ->

State 84:
## Known stack suffix:
## LP
## LR(1) items:
expr -> LP . expr EQUAL expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
two_plus_tuple -> LP . expr COMMA loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 196
-- On def_inner shift to state 119
## Reductions:

State 85:
## Known stack suffix:
## LFLOOR
## LR(1) items:
expr -> LFLOOR . expr RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 194
-- On def_inner shift to state 119
## Reductions:

State 86:
## Known stack suffix:
## LET
## LR(1) items:
def_inner -> LET . REC ident param_list option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
def_inner -> LET . ident param_list option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET . ident EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On REC shift to state 87
-- On IDENT shift to state 2
-- On ident shift to state 176
## Reductions:

State 87:
## Known stack suffix:
## LET REC
## LR(1) items:
def_inner -> LET REC . ident param_list option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LET REC ident
## LR(1) items:
def_inner -> LET REC ident . param_list option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On UNIT shift to state 37
-- On LP shift to state 38
-- On param_list shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LET REC ident param_list
## LR(1) items:
def_inner -> LET REC ident param_list . option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On COLON shift to state 57
-- On option(fun_ret) shift to state 90
-- On fun_ret shift to state 175
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 90:
## Known stack suffix:
## LET REC ident param_list option(fun_ret)
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) . EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) EQUAL . block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) EQUAL block . spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block spec
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) EQUAL block spec . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block spec IN
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) EQUAL block spec IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 174
-- On def_inner shift to state 119
## Reductions:

State 95:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 169
-- On def_inner shift to state 119
## Reductions:

State 96:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . ident EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## FOR ident
## LR(1) items:
expr -> FOR ident . EQUAL expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## FOR ident EQUAL
## LR(1) items:
expr -> FOR ident EQUAL . expr TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 158
-- On def_inner shift to state 119
## Reductions:

State 99:
## Known stack suffix:
## DEREF
## LR(1) items:
expr -> DEREF . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 157
-- On def_inner shift to state 119
## Reductions:

State 100:
## Known stack suffix:
## CST
## LR(1) items:
expr -> CST . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> CST

State 101:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . LP expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## ASSERT LP
## LR(1) items:
expr -> ASSERT LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 155
-- On def_inner shift to state 119
## Reductions:

State 103:
## Known stack suffix:
## two_plus_tuple
## LR(1) items:
expr -> two_plus_tuple . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> two_plus_tuple

State 104:
## Known stack suffix:
## ident_cap
## LR(1) items:
expr -> ident_cap . tuple [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident_cap . DOT ident app_body [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 105
-- On IDENT shift to state 2
-- On DOT shift to state 149
-- On two_plus_tuple shift to state 152
-- On tuple shift to state 153
-- On ident shift to state 154
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DONE DO DIV COMMA CMP CASE
--   reduce production tuple ->

State 105:
## Known stack suffix:
## LP
## LR(1) items:
tuple -> LP . ident RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
two_plus_tuple -> LP . expr COMMA loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 106
-- On expr shift to state 145
-- On def_inner shift to state 119
## Reductions:

State 106:
## Known stack suffix:
## LP ident
## LR(1) items:
expr -> ident . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> ident . ASSIGN expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> ident . app_body [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> ident . DOT LP expr RP [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> ident . DOT LP expr RP INVARROW expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
tuple -> LP ident . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
-- On UNIT shift to state 107
-- On RP shift to state 108
-- On LP shift to state 109
-- On DOT shift to state 114
-- On ASSIGN shift to state 139
-- On app_body shift to state 141
## Reductions:
-- On TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP
--   reduce production expr -> ident

State 107:
## Known stack suffix:
## UNIT
## LR(1) items:
app_body -> UNIT . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production app_body -> UNIT

State 108:
## Known stack suffix:
## LP ident RP
## LR(1) items:
tuple -> LP ident RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW
--   reduce production tuple -> LP ident RP

State 109:
## Known stack suffix:
## LP
## LR(1) items:
app_body -> LP . loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On separated_nonempty_list(COMMA,expr) shift to state 110
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 111
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 142
-- On def_inner shift to state 119
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 110:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 111:
## Known stack suffix:
## LP loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
app_body -> LP loption(separated_nonempty_list(COMMA,expr)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On RP shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## LP loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
app_body -> LP loption(separated_nonempty_list(COMMA,expr)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production app_body -> LP loption(separated_nonempty_list(COMMA,expr)) RP

State 113:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . ASSIGN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . app_body [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . DOT LP expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . DOT LP expr RP INVARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On UNIT shift to state 107
-- On LP shift to state 109
-- On DOT shift to state 114
-- On ASSIGN shift to state 139
-- On app_body shift to state 141
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident

State 114:
## Known stack suffix:
## ident DOT
## LR(1) items:
expr -> ident DOT . LP expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident DOT . LP expr RP INVARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On LP shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## ident DOT LP
## LR(1) items:
expr -> ident DOT LP . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident DOT LP . expr RP INVARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 116
-- On def_inner shift to state 119
## Reductions:

State 116:
## Known stack suffix:
## ident DOT LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> ident DOT LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident DOT LP expr . RP INVARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On RP shift to state 120
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 117:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 118
-- On def_inner shift to state 119
## Reductions:

State 118:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr TIMES expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr TIMES expr

State 119:
## Known stack suffix:
## def_inner
## LR(1) items:
expr -> def_inner . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> def_inner

State 120:
## Known stack suffix:
## ident DOT LP expr RP
## LR(1) items:
expr -> ident DOT LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident DOT LP expr RP . INVARROW expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On INVARROW shift to state 121
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident DOT LP expr RP

State 121:
## Known stack suffix:
## ident DOT LP expr RP INVARROW
## LR(1) items:
expr -> ident DOT LP expr RP INVARROW . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 122
-- On def_inner shift to state 119
## Reductions:

State 122:
## Known stack suffix:
## ident DOT LP expr RP INVARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident DOT LP expr RP INVARROW expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On DIV shift to state 127
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CMP CASE
--   reduce production expr -> ident DOT LP expr RP INVARROW expr

State 123:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 124
-- On def_inner shift to state 119
## Reductions:

State 124:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PLUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On MOD shift to state 125
-- On DIV shift to state 127
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CMP CASE
--   reduce production expr -> expr PLUS expr

State 125:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 126
-- On def_inner shift to state 119
## Reductions:

State 126:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr MOD expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr MOD expr

State 127:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 128
-- On def_inner shift to state 119
## Reductions:

State 128:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr DIV expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> expr DIV expr

State 129:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 130
-- On def_inner shift to state 119
## Reductions:

State 130:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On MOD shift to state 125
-- On DIV shift to state 127
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PLUS PIPE MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CMP CASE
--   reduce production expr -> expr MINUS expr

State 131:
## Known stack suffix:
## expr PIPE
## LR(1) items:
expr -> expr PIPE . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 132
-- On def_inner shift to state 119
## Reductions:

State 132:
## Known stack suffix:
## expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> expr PIPE expr

State 133:
## Known stack suffix:
## expr LOGICOR
## LR(1) items:
expr -> expr LOGICOR . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 134
-- On def_inner shift to state 119
## Reductions:

State 134:
## Known stack suffix:
## expr LOGICOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr LOGICOR expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> expr LOGICOR expr

State 135:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr -> expr CMP . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 136
-- On def_inner shift to state 119
## Reductions:

State 136:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr CMP expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On DIV shift to state 127
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> expr CMP expr

State 137:
## Known stack suffix:
## expr LOGICAND
## LR(1) items:
expr -> expr LOGICAND . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 138
-- On def_inner shift to state 119
## Reductions:

State 138:
## Known stack suffix:
## expr LOGICAND expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr LOGICAND expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> expr LOGICAND expr

State 139:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
expr -> ident ASSIGN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 140
-- On def_inner shift to state 119
## Reductions:

State 140:
## Known stack suffix:
## ident ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident ASSIGN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> ident ASSIGN expr

State 141:
## Known stack suffix:
## ident app_body
## LR(1) items:
expr -> ident app_body . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident app_body

State 142:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
separated_nonempty_list(COMMA,expr) -> expr . [ RP ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On COMMA shift to state 143
-- On CMP shift to state 135
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 143:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RP ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On separated_nonempty_list(COMMA,expr) shift to state 144
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 142
-- On def_inner shift to state 119
## Reductions:

State 144:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 145:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV COMMA CMP ]
two_plus_tuple -> LP expr . COMMA loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On COMMA shift to state 146
-- On CMP shift to state 135
## Reductions:

State 146:
## Known stack suffix:
## LP expr COMMA
## LR(1) items:
two_plus_tuple -> LP expr COMMA . loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On separated_nonempty_list(COMMA,expr) shift to state 110
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 147
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 142
-- On def_inner shift to state 119
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 147:
## Known stack suffix:
## LP expr COMMA loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
two_plus_tuple -> LP expr COMMA loption(separated_nonempty_list(COMMA,expr)) . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
-- On RP shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## LP expr COMMA loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
two_plus_tuple -> LP expr COMMA loption(separated_nonempty_list(COMMA,expr)) RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW
--   reduce production two_plus_tuple -> LP expr COMMA loption(separated_nonempty_list(COMMA,expr)) RP

State 149:
## Known stack suffix:
## ident_cap DOT
## LR(1) items:
expr -> ident_cap DOT . ident app_body [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## ident_cap DOT ident
## LR(1) items:
expr -> ident_cap DOT ident . app_body [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On UNIT shift to state 107
-- On LP shift to state 109
-- On app_body shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## ident_cap DOT ident app_body
## LR(1) items:
expr -> ident_cap DOT ident app_body . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident_cap DOT ident app_body

State 152:
## Known stack suffix:
## two_plus_tuple
## LR(1) items:
tuple -> two_plus_tuple . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW
--   reduce production tuple -> two_plus_tuple

State 153:
## Known stack suffix:
## ident_cap tuple
## LR(1) items:
expr -> ident_cap tuple . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ident_cap tuple

State 154:
## Known stack suffix:
## ident
## LR(1) items:
tuple -> ident . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ARROW
--   reduce production tuple -> ident

State 155:
## Known stack suffix:
## ASSERT LP expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> ASSERT LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On RP shift to state 156
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 156:
## Known stack suffix:
## ASSERT LP expr RP
## LR(1) items:
expr -> ASSERT LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> ASSERT LP expr RP

State 157:
## Known stack suffix:
## DEREF expr
## LR(1) items:
expr -> DEREF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> DEREF expr

State 158:
## Known stack suffix:
## FOR ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> FOR ident EQUAL expr . TO expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TO shift to state 159
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 159:
## Known stack suffix:
## FOR ident EQUAL expr TO
## LR(1) items:
expr -> FOR ident EQUAL expr TO . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 160
-- On def_inner shift to state 119
## Reductions:

State 160:
## Known stack suffix:
## FOR ident EQUAL expr TO expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> FOR ident EQUAL expr TO expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DO shift to state 161
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 161:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 162
-- On option(spec) shift to state 163
## Reductions:
-- On WHILE UNIT REF NOT MINUS MATCH LSQBR LP LFLOOR LET IF IDENT_CAP IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 162:
## Known stack suffix:
## spec
## LR(1) items:
option(spec) -> spec . [ WHILE UNIT REF NOT MINUS MATCH LSQBR LP LFLOOR LET IF IDENT_CAP IDENT FOR DEREF CST ASSERT ]
## Transitions:
## Reductions:
-- On WHILE UNIT REF NOT MINUS MATCH LSQBR LP LFLOOR LET IF IDENT_CAP IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) -> spec

State 163:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec)
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 164
-- On def_inner shift to state 119
-- On block_core shift to state 167
## Reductions:

State 164:
## Known stack suffix:
## expr
## LR(1) items:
block_core -> expr . [ END DONE ]
block_core -> expr . SEMICOLON block_core [ END DONE ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . MOD expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . CMP expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
expr -> expr . PIPE expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND END DONE DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On SEMICOLON shift to state 165
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On END DONE
--   reduce production block_core -> expr

State 165:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
block_core -> expr SEMICOLON . block_core [ END DONE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 164
-- On def_inner shift to state 119
-- On block_core shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## expr SEMICOLON block_core
## LR(1) items:
block_core -> expr SEMICOLON block_core . [ END DONE ]
## Transitions:
## Reductions:
-- On END DONE
--   reduce production block_core -> expr SEMICOLON block_core

State 167:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## FOR ident EQUAL expr TO expr DO option(spec) block_core DONE
## LR(1) items:
expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> FOR ident EQUAL expr TO expr DO option(spec) block_core DONE

State 169:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> IF expr . THEN block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES THEN PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On THEN shift to state 170
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 170:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . block ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## IF expr THEN block
## LR(1) items:
expr -> IF expr THEN block . ELSE block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On ELSE shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## IF expr THEN block ELSE
## LR(1) items:
expr -> IF expr THEN block ELSE . block [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## IF expr THEN block ELSE block
## LR(1) items:
expr -> IF expr THEN block ELSE block . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> IF expr THEN block ELSE block

State 174:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block spec IN expr
## LR(1) items:
def_inner -> LET REC ident param_list option(fun_ret) EQUAL block spec IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production def_inner -> LET REC ident param_list option(fun_ret) EQUAL block spec IN expr

State 175:
## Known stack suffix:
## fun_ret
## LR(1) items:
option(fun_ret) -> fun_ret . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) -> fun_ret

State 176:
## Known stack suffix:
## LET ident
## LR(1) items:
def_inner -> LET ident . param_list option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident . EQUAL expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On UNIT shift to state 37
-- On LP shift to state 38
-- On EQUAL shift to state 177
-- On param_list shift to state 187
## Reductions:

State 177:
## Known stack suffix:
## LET ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL . expr PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 178
-- On def_inner shift to state 119
## Reductions:

State 178:
## Known stack suffix:
## LET ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr . PIPE ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 179
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On IN shift to state 185
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 179:
## Known stack suffix:
## LET ident EQUAL expr PIPE
## LR(1) items:
expr -> LET ident EQUAL expr PIPE . ident EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 180
-- On expr shift to state 132
-- On def_inner shift to state 119
## Reductions:

State 180:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident
## LR(1) items:
expr -> ident . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident . EQUAL expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> ident . ASSIGN expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> ident . app_body [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> ident . DOT LP expr RP [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> ident . DOT LP expr RP INVARROW expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On UNIT shift to state 107
-- On LP shift to state 109
-- On EQUAL shift to state 181
-- On DOT shift to state 114
-- On ASSIGN shift to state 139
-- On app_body shift to state 141
## Reductions:
-- On TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP
--   reduce production expr -> ident

State 181:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL . expr IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 182
-- On def_inner shift to state 119
## Reductions:

State 182:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND IN DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On IN shift to state 183
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 183:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 184
-- On def_inner shift to state 119
## Reductions:

State 184:
## Known stack suffix:
## LET ident EQUAL expr PIPE ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> LET ident EQUAL expr PIPE ident EQUAL expr IN expr

State 185:
## Known stack suffix:
## LET ident EQUAL expr IN
## LR(1) items:
expr -> LET ident EQUAL expr IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 186
-- On def_inner shift to state 119
## Reductions:

State 186:
## Known stack suffix:
## LET ident EQUAL expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> LET ident EQUAL expr IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> LET ident EQUAL expr IN expr

State 187:
## Known stack suffix:
## LET ident param_list
## LR(1) items:
def_inner -> LET ident param_list . option(fun_ret) EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On COLON shift to state 57
-- On option(fun_ret) shift to state 188
-- On fun_ret shift to state 175
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 188:
## Known stack suffix:
## LET ident param_list option(fun_ret)
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) . EQUAL block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On EQUAL shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) EQUAL . block spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) EQUAL block . spec IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block spec
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) EQUAL block spec . IN expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On IN shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block spec IN
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) EQUAL block spec IN . expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 193
-- On def_inner shift to state 119
## Reductions:

State 193:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block spec IN expr
## LR(1) items:
def_inner -> LET ident param_list option(fun_ret) EQUAL block spec IN expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production def_inner -> LET ident param_list option(fun_ret) EQUAL block spec IN expr

State 194:
## Known stack suffix:
## LFLOOR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> LFLOOR expr . RFLOOR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On RFLOOR shift to state 195
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 195:
## Known stack suffix:
## LFLOOR expr RFLOOR
## LR(1) items:
expr -> LFLOOR expr RFLOOR . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LFLOOR expr RFLOOR

State 196:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> LP expr . EQUAL expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND EQUAL DIV COMMA CMP ]
expr -> LP expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
two_plus_tuple -> LP expr . COMMA loption(separated_nonempty_list(COMMA,expr)) RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On RP shift to state 197
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On EQUAL shift to state 198
-- On DIV shift to state 127
-- On COMMA shift to state 146
-- On CMP shift to state 135
## Reductions:

State 197:
## Known stack suffix:
## LP expr RP
## LR(1) items:
expr -> LP expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LP expr RP

State 198:
## Known stack suffix:
## LP expr EQUAL
## LR(1) items:
expr -> LP expr EQUAL . expr RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 199
-- On def_inner shift to state 119
## Reductions:

State 199:
## Known stack suffix:
## LP expr EQUAL expr
## LR(1) items:
expr -> LP expr EQUAL expr . RP [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . PIPE expr [ TIMES RP PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On RP shift to state 200
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 200:
## Known stack suffix:
## LP expr EQUAL expr RP
## LR(1) items:
expr -> LP expr EQUAL expr RP . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LP expr EQUAL expr RP

State 201:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,expr)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,expr)) -> separated_nonempty_list(SEMICOLON,expr) . [ CASE ]
## Transitions:
## Reductions:
-- On CASE
--   reduce production loption(separated_nonempty_list(SEMICOLON,expr)) -> separated_nonempty_list(SEMICOLON,expr)

State 202:
## Known stack suffix:
## LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr))
## LR(1) items:
expr -> LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) . CASE RSQBR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE
## LR(1) items:
expr -> LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE . RSQBR [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On RSQBR shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE RSQBR
## LR(1) items:
expr -> LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE RSQBR . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> LSQBR CASE loption(separated_nonempty_list(SEMICOLON,expr)) CASE RSQBR

State 205:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . MOD expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . CMP expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . LOGICAND expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . LOGICOR expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
expr -> expr . PIPE expr [ TIMES SEMICOLON PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP CASE ]
separated_nonempty_list(SEMICOLON,expr) -> expr . [ CASE ]
separated_nonempty_list(SEMICOLON,expr) -> expr . SEMICOLON separated_nonempty_list(SEMICOLON,expr) [ CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On SEMICOLON shift to state 206
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On CASE
--   reduce production separated_nonempty_list(SEMICOLON,expr) -> expr

State 206:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON . separated_nonempty_list(SEMICOLON,expr) [ CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On separated_nonempty_list(SEMICOLON,expr) shift to state 207
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 205
-- On def_inner shift to state 119
## Reductions:

State 207:
## Known stack suffix:
## expr SEMICOLON separated_nonempty_list(SEMICOLON,expr)
## LR(1) items:
separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON separated_nonempty_list(SEMICOLON,expr) . [ CASE ]
## Transitions:
## Reductions:
-- On CASE
--   reduce production separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON separated_nonempty_list(SEMICOLON,expr)

State 208:
## Known stack suffix:
## CASE pattern ARROW expr
## LR(1) items:
case -> CASE pattern ARROW expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 131
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production case -> CASE pattern ARROW expr

State 209:
## Known stack suffix:
## ident_cap
## LR(1) items:
pattern -> ident_cap . tuple [ ARROW ]
## Transitions:
-- On LP shift to state 105
-- On IDENT shift to state 2
-- On two_plus_tuple shift to state 152
-- On tuple shift to state 210
-- On ident shift to state 154
## Reductions:
-- On ARROW
--   reduce production tuple ->

State 210:
## Known stack suffix:
## ident_cap tuple
## LR(1) items:
pattern -> ident_cap tuple . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> ident_cap tuple

State 211:
## Known stack suffix:
## ident
## LR(1) items:
pattern -> ident . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> ident

State 212:
## Known stack suffix:
## MATCH ident WITH case_list
## LR(1) items:
case_list -> case_list . case [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> MATCH ident WITH case_list . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On CASE shift to state 77
-- On case shift to state 213
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP
--   reduce production expr -> MATCH ident WITH case_list

State 213:
## Known stack suffix:
## case_list case
## LR(1) items:
case_list -> case_list case . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production case_list -> case_list case

State 214:
## Known stack suffix:
## case
## LR(1) items:
case_list -> case . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production case_list -> case

State 215:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> MINUS expr

State 216:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On TO THEN SEMICOLON RP RFLOOR PIPE LOGICOR LOGICAND IN EQUAL END DOT DONE DO COMMA CASE
--   reduce production expr -> NOT expr

State 217:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PLUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MINUS expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . TIMES expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . DIV expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . MOD expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . CMP expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICAND expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . LOGICOR expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> REF expr

State 218:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> WHILE expr . PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 219
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DO shift to state 229
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 219:
## Known stack suffix:
## WHILE expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE . expr DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 220
-- On def_inner shift to state 119
## Reductions:

State 220:
## Known stack suffix:
## WHILE expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> WHILE expr PIPE expr . DOT expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DOT DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DOT shift to state 221
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On PIPE DO
--   reduce production expr -> expr PIPE expr

State 221:
## Known stack suffix:
## WHILE expr PIPE expr DOT
## LR(1) items:
expr -> WHILE expr PIPE expr DOT . expr PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 222
-- On def_inner shift to state 119
## Reductions:

State 222:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr . PIPE expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On PIPE shift to state 223
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:

State 223:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE . expr DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr PIPE . expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 224
-- On def_inner shift to state 119
## Reductions:

State 224:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MINUS expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . TIMES expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . DIV expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . MOD expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . CMP expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICAND expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr . LOGICOR expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> WHILE expr PIPE expr DOT expr PIPE expr . DO option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
expr -> expr . PIPE expr [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DO DIV CMP ]
expr -> expr PIPE expr . [ TIMES PLUS PIPE MOD MINUS LOGICOR LOGICAND DIV CMP ]
## Transitions:
-- On TIMES shift to state 117
-- On PLUS shift to state 123
-- On MOD shift to state 125
-- On MINUS shift to state 129
-- On LOGICOR shift to state 133
-- On LOGICAND shift to state 137
-- On DO shift to state 225
-- On DIV shift to state 127
-- On CMP shift to state 135
## Reductions:
-- On PIPE
--   reduce production expr -> expr PIPE expr

State 225:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 162
-- On option(spec) shift to state 226
## Reductions:
-- On WHILE UNIT REF NOT MINUS MATCH LSQBR LP LFLOOR LET IF IDENT_CAP IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 226:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 164
-- On def_inner shift to state 119
-- On block_core shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> WHILE expr PIPE expr DOT expr PIPE expr DO option(spec) block_core DONE

State 229:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
expr -> WHILE expr DO . option(spec) block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 162
-- On option(spec) shift to state 230
## Reductions:
-- On WHILE UNIT REF NOT MINUS MATCH LSQBR LP LFLOOR LET IF IDENT_CAP IDENT FOR DEREF CST ASSERT
--   reduce production option(spec) ->

State 230:
## Known stack suffix:
## WHILE expr DO option(spec)
## LR(1) items:
expr -> WHILE expr DO option(spec) . block_core DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On WHILE shift to state 69
-- On UNIT shift to state 70
-- On REF shift to state 71
-- On NOT shift to state 72
-- On MINUS shift to state 73
-- On MATCH shift to state 74
-- On LSQBR shift to state 82
-- On LP shift to state 84
-- On LFLOOR shift to state 85
-- On LET shift to state 86
-- On IF shift to state 95
-- On IDENT_CAP shift to state 10
-- On IDENT shift to state 2
-- On FOR shift to state 96
-- On DEREF shift to state 99
-- On CST shift to state 100
-- On ASSERT shift to state 101
-- On two_plus_tuple shift to state 103
-- On ident_cap shift to state 104
-- On ident shift to state 113
-- On expr shift to state 164
-- On def_inner shift to state 119
-- On block_core shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## WHILE expr DO option(spec) block_core
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core . DONE [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On DONE shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## WHILE expr DO option(spec) block_core DONE
## LR(1) items:
expr -> WHILE expr DO option(spec) block_core DONE . [ TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END DOT DONE DO DIV COMMA CMP CASE
--   reduce production expr -> WHILE expr DO option(spec) block_core DONE

State 233:
## Known stack suffix:
## BEGIN block_core
## LR(1) items:
block -> BEGIN block_core . END [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
-- On END shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## BEGIN block_core END
## LR(1) items:
block -> BEGIN block_core END . [ TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END ELSE DOT DONE DO DIV COMMA CMP CASE ]
## Transitions:
## Reductions:
-- On TO TIMES THEN SPEC SEMICOLON RP RFLOOR PLUS PIPE MOD MINUS LOGICOR LOGICAND IN EQUAL END ELSE DOT DONE DO DIV COMMA CMP CASE
--   reduce production block -> BEGIN block_core END

State 235:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block
## LR(1) items:
def_outer -> LET REC ident param_list option(fun_ret) EQUAL block . spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## LET REC ident param_list option(fun_ret) EQUAL block spec
## LR(1) items:
def_outer -> LET REC ident param_list option(fun_ret) EQUAL block spec . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production def_outer -> LET REC ident param_list option(fun_ret) EQUAL block spec

State 237:
## Known stack suffix:
## LET ident
## LR(1) items:
def_outer -> LET ident . param_list option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On UNIT shift to state 37
-- On LP shift to state 38
-- On param_list shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## LET ident param_list
## LR(1) items:
def_outer -> LET ident param_list . option(fun_ret) EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On COLON shift to state 57
-- On option(fun_ret) shift to state 239
-- On fun_ret shift to state 175
## Reductions:
-- On EQUAL
--   reduce production option(fun_ret) ->

State 239:
## Known stack suffix:
## LET ident param_list option(fun_ret)
## LR(1) items:
def_outer -> LET ident param_list option(fun_ret) . EQUAL block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On EQUAL shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL
## LR(1) items:
def_outer -> LET ident param_list option(fun_ret) EQUAL . block spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On BEGIN shift to state 68
-- On block shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block
## LR(1) items:
def_outer -> LET ident param_list option(fun_ret) EQUAL block . spec [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On SPEC shift to state 31
-- On spec shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## LET ident param_list option(fun_ret) EQUAL block spec
## LR(1) items:
def_outer -> LET ident param_list option(fun_ret) EQUAL block spec . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production def_outer -> LET ident param_list option(fun_ret) EQUAL block spec

State 243:
## Known stack suffix:
## INCLUDE
## LR(1) items:
decl -> INCLUDE . ident_cap [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
-- On IDENT_CAP shift to state 10
-- On ident_cap shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## INCLUDE ident_cap
## LR(1) items:
decl -> INCLUDE ident_cap . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production decl -> INCLUDE ident_cap

State 245:
## Known stack suffix:
## type_def
## LR(1) items:
decl -> type_def . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production decl -> type_def

State 246:
## Known stack suffix:
## spec
## LR(1) items:
decl -> spec . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production decl -> spec

State 247:
## Known stack suffix:
## list(decl)
## LR(1) items:
file -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
file -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(decl) EOF

State 249:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 250:
## Known stack suffix:
## def_outer
## LR(1) items:
decl -> def_outer . [ TYPE SPEC OPEN LET INCLUDE EOF ]
## Transitions:
## Reductions:
-- On TYPE SPEC OPEN LET INCLUDE EOF
--   reduce production decl -> def_outer

State 251:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On TYPE shift to state 1
-- On SPEC shift to state 31
-- On OPEN shift to state 32
-- On LET shift to state 34
-- On INCLUDE shift to state 243
-- On type_def shift to state 245
-- On spec shift to state 246
-- On list(decl) shift to state 252
-- On def_outer shift to state 250
-- On decl shift to state 251
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 252:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

