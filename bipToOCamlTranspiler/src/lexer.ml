# 4 "lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string

  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      ["let", LET; "if", IF; "else", ELSE;
       "then", THEN; "print", PRINT;
       "for", FOR; "while", WHILE;
       "do", DO; "done", DONE;
       "ref", REF; "in", IN; 
       "and", AND; "or", OR; "not", NOT;
       "true", CST (Cbool true);
       "false", CST (Cbool false);
       "int", INT; "bool", BOOL;
       "None", CST Cnone;];
   fun s -> try Hashtbl.find h s with Not_found -> IDENT s

  let string_buffer = Buffer.create 1024

  let stack = ref [0]  (* indentation stack *)

  let rec unindent n = match !stack with
    | m :: _ when m = n -> []
    | m :: st when m > n -> stack := st; END :: unindent n
    | _ -> raise (Lexing_error "bad indentation")

  let update_stack n =
    match !stack with
    | m :: _ when m < n ->
      stack := n :: !stack;
      [NEWLINE; BEGIN]
    | _ ->
      NEWLINE :: unindent n

# 42 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\000\000\230\255\233\255\077\000\234\255\
    \002\000\236\255\237\255\238\255\239\255\003\000\078\000\031\000\
    \033\000\248\255\012\000\250\255\251\255\252\255\093\000\004\000\
    \255\255\254\255\249\255\246\255\245\255\034\000\243\255\227\255\
    \241\255\232\255\013\000\228\255\229\255\003\000\255\255\095\000\
    \252\255\253\255\094\000\097\000\255\255\254\255\150\000\251\255\
    \252\255\119\000\255\255\253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\030\000\255\255\255\255\021\000\255\255\
    \020\000\255\255\255\255\255\255\255\255\013\000\011\000\024\000\
    \008\000\255\255\030\000\255\255\255\255\255\255\002\000\015\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\002\000\002\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\000\000\041\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\048\000\000\000\
    \000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\024\000\000\000\037\000\038\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\015\000\005\000\037\000\000\000\017\000\000\000\000\000\
    \023\000\012\000\019\000\021\000\009\000\020\000\025\000\018\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\008\000\026\000\014\000\016\000\013\000\033\000\
    \032\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\011\000\028\000\010\000\027\000\022\000\
    \031\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\029\000\004\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\042\000\
    \045\000\043\000\044\000\030\000\034\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\036\000\
    \035\000\051\000\000\000\000\000\000\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \050\000\000\000\000\000\000\000\022\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\000\000\052\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\047\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\037\000\037\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\037\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\018\000\000\000\000\000\000\000\008\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\016\000\000\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\014\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\039\000\
    \042\000\039\000\043\000\014\000\003\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\034\000\
    \034\000\049\000\255\255\255\255\255\255\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \046\000\255\255\255\255\255\255\022\000\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\049\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\046\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\046\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_tokens lexbuf =
   __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 51 "lexer.mll"
            ( new_line lexbuf; update_stack (indentation lexbuf) )
# 193 "lexer.ml"

  | 1 ->
# 52 "lexer.mll"
            ( comment lexbuf; token lexbuf )
# 198 "lexer.ml"

  | 2 ->
let
# 53 "lexer.mll"
             id
# 204 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "lexer.mll"
                ( [id_or_kwd id] )
# 208 "lexer.ml"

  | 3 ->
# 54 "lexer.mll"
            ( [PLUS] )
# 213 "lexer.ml"

  | 4 ->
# 55 "lexer.mll"
            ( [MINUS] )
# 218 "lexer.ml"

  | 5 ->
# 56 "lexer.mll"
            ( [TIMES] )
# 223 "lexer.ml"

  | 6 ->
# 57 "lexer.mll"
            ( [DIV] )
# 228 "lexer.ml"

  | 7 ->
# 58 "lexer.mll"
            ( [MOD] )
# 233 "lexer.ml"

  | 8 ->
# 59 "lexer.mll"
            ( [EQUAL] )
# 238 "lexer.ml"

  | 9 ->
# 60 "lexer.mll"
            ( [CMP Beq] )
# 243 "lexer.ml"

  | 10 ->
# 61 "lexer.mll"
            ( [CMP Bneq] )
# 248 "lexer.ml"

  | 11 ->
# 62 "lexer.mll"
            ( [CMP Blt] )
# 253 "lexer.ml"

  | 12 ->
# 63 "lexer.mll"
            ( [CMP Ble] )
# 258 "lexer.ml"

  | 13 ->
# 64 "lexer.mll"
            ( [CMP Bgt] )
# 263 "lexer.ml"

  | 14 ->
# 65 "lexer.mll"
            ( [CMP Bge] )
# 268 "lexer.ml"

  | 15 ->
# 66 "lexer.mll"
            ( [LP] )
# 273 "lexer.ml"

  | 16 ->
# 67 "lexer.mll"
            ( [RP] )
# 278 "lexer.ml"

  | 17 ->
# 68 "lexer.mll"
            ( [LSQ] )
# 283 "lexer.ml"

  | 18 ->
# 69 "lexer.mll"
            ( [RSQ] )
# 288 "lexer.ml"

  | 19 ->
# 70 "lexer.mll"
            ( [COMMA] )
# 293 "lexer.ml"

  | 20 ->
# 71 "lexer.mll"
            ( [COLON] )
# 298 "lexer.ml"

  | 21 ->
let
# 72 "lexer.mll"
               s
# 304 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 73 "lexer.mll"
            ( try [CST (Cint (int_of_string s))]
              with _ -> raise (Lexing_error ("constant too large: " ^ s)) )
# 309 "lexer.ml"

  | 22 ->
# 75 "lexer.mll"
            ( [CST (Cstring (string lexbuf))] )
# 314 "lexer.ml"

  | 23 ->
# 77 "lexer.mll"
            ( [ASSIGN] )
# 319 "lexer.ml"

  | 24 ->
# 78 "lexer.mll"
            ( [DEREF] )
# 324 "lexer.ml"

  | 25 ->
# 80 "lexer.mll"
            ( [PIPE] )
# 329 "lexer.ml"

  | 26 ->
# 81 "lexer.mll"
              ( [LEFT_FLOOR] )
# 334 "lexer.ml"

  | 27 ->
# 82 "lexer.mll"
              ( [RIGHT_FLOOR] )
# 339 "lexer.ml"

  | 28 ->
# 83 "lexer.mll"
            ( [SPEC_EQUAL] )
# 344 "lexer.ml"

  | 29 ->
# 85 "lexer.mll"
            ( NEWLINE :: unindent 0 @ [EOF] )
# 349 "lexer.ml"

  | 30 ->
let
# 86 "lexer.mll"
         c
# 355 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 86 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 359 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

and indentation lexbuf =
   __ocaml_lex_indentation_rec lexbuf 37
and __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "lexer.mll"
      ( new_line lexbuf; indentation lexbuf )
# 371 "lexer.ml"

  | 1 ->
let
# 91 "lexer.mll"
              s
# 377 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 92 "lexer.mll"
      ( String.length s )
# 381 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 39
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 95 "lexer.mll"
          ( () )
# 393 "lexer.ml"

  | 1 ->
# 96 "lexer.mll"
          ( comment lexbuf; comment lexbuf )
# 398 "lexer.ml"

  | 2 ->
# 97 "lexer.mll"
          ( comment lexbuf )
# 403 "lexer.ml"

  | 3 ->
# 98 "lexer.mll"
          ( failwith "Comment not terminated" )
# 408 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 46
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 102 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 422 "lexer.ml"

  | 1 ->
# 106 "lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 428 "lexer.ml"

  | 2 ->
# 109 "lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 434 "lexer.ml"

  | 3 ->
let
# 111 "lexer.mll"
         c
# 440 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 112 "lexer.mll"
      ( Buffer.add_char string_buffer c;
	string lexbuf )
# 445 "lexer.ml"

  | 4 ->
# 115 "lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 450 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 117 "lexer.mll"
 

  let next_token =
    let tokens = Queue.create () in (* next tokens to emit *)
    fun lb ->
      if Queue.is_empty tokens then begin
	let l = next_tokens lb in
	List.iter (fun t -> Queue.add t tokens) l
      end;
      Queue.pop tokens

  let () =
  let lexbuf = Lexing.from_channel stdin in
  try
    let toks = Lexer.next_tokens lexbuf in
    List.iter (fun t -> Printf.printf "Token: %s\n" (Parser.show_token t)) toks
  with
  | Lexer.Lexing_error msg -> Printf.eprintf "Lexing error: %s\n" msg

# 477 "lexer.ml"
