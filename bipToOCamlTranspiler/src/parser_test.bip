let bip (x1, y1) =
    let x2 = y1 * 2 in
    let y2 = 34 in
    if y2 > x2 then |_ x2 + y2 _|
    else |_ x2 - y2 _|
(*@ requires x1 <-> x1 && y1 <-> y1*)

let bip2 (x, y) = 
    let z = ref (-1) in
    let b = not (true && false) in
    z := !z + 1;
    b

let bip3 (x, y) = 
    let z = ref x in
    for i = 0 to y do
        z := !z * 3
    done;
    !z

let fact_iter (n) =
	if n <= 1 then 1
	else
		begin 
			let res = ref 1 in
			for i = 2 to n do
				(*@ invariant !res = fact (i-1) *)
				res := !res * i
			done;
			!res
		end

let gcd_iter (a0, b0) =
    let b = ref b0 in
    let a = ref a0 in
    while !b <> 0 do
        (*@ invariant 0 <= !b
            invariant 0 <= !a
            invariant gcd a0 b0 = gcd !a !b
            variant !b *)
        let tmp = !a in
        a := !b;
        b := tmp mod !b
    done;
    !a

let p2 () = 
    let x = ref 0 in 
    let y = ref 2 in
    x := !x + 1 | y := !y + 2;
    !y

let bip (|_c_|) =
    if |_c_| then |_1_|
    else |_0_|
(*@ requires c <-> c *)


(*let bip (|_b : int_|) (|_c : int_|) (|_n : int_|) : |_int_| =
    |_let i = ref 0 in_|;
    let j = ref 0 in; | let j = ref c in;
    |_let x = ref 0 in_|;

    while (|_!i < n_|) do
        (*@ invariant |_!i >= 0_| 
            invariant skip | !j = !i * b + c 
            invariant !i <-> !i 
            invariant !x <-> !x 
            variant |_n - !i_|  *)
        j := !i * b + c; | x := !x + !j;
        x := !x + !j;    | j := !j + b;
        |_i := !i + 1_|
    done;
    |_!x_|
(*@ requires b <-> b && c <-> c && n <-> n *)
*)