let bip_short (|_b : int_|, |_c : int_|, |_n : int_|) : |_int_| = begin
    let i = ref 0 in
    let j = ref 0 in | let j = ref c in;
    |_ let x = ref 0 in _|;
    !x 
end

let bip_complete (|_b : int_|, |_c : int_|, |_n : int_|) : |_int_| = begin
    |_ let i = ref 0 in _|;
    let j = ref 0 in | let j = ref c in;
    |_ let x = ref 0 in _|;

    while (|_ !i < n _|) do
        j := !i * b + c | x := !x + !j;
        x := !x + !j    | j := !j + b;
        |_ i := !i + 1 _|
    done;

    |_ !x _|
end

let bip (x1 : int, y1 : bool) : int = begin
    let x2 = y1 * 2 in
    let y2 = 34 in
    if y2 > x2 then begin |_ x2 + y2 _| end
    else begin |_ x2 - y2 _| end
end
(*@ requires x1 <-> x1 && y1 <-> y1*)

let bip2 (x, y) = begin
    let z = ref (-1) in
    let b = not (true && false) in
    z := !z + 1;
    b
end

let bip3 (x : int, y) = begin
    let z = ref x in
    for i = 0 to y do
        z := !z * 3
    done;
    !z
end

let fact_iter (n) = begin
	if n <= 1 
    then begin 1 end
	else
		begin 
			let res = ref 1 in
			for i = 2 to n do
				(*@ invariant !res = fact (i-1) *)
				res := !res * i
			done
		end
end

let bip_if (|_c_|) : |_int_| = begin
    if |_c_| 
    then begin |_1_| end
    else begin |_0_| end
end
(*@ requires c <-> c *)

let semicolon_test () = begin
    let x = ref 0 in
    x := 1;
    x := 2;
    x
end

let gcd_iter (a0, b0) = begin 
    let b = ref b0 in
    let a = ref a0 in
    while !b <> 0 do
        (*@ invariant 0 <= !b
            invariant 0 <= !a
            invariant gcd a0 b0 = gcd !a !b
            variant !b *)
        let tmp = !a in
        a := !b;
        b := tmp mod !b
    done;
    !a
end

let p2 () = begin
    let x = ref 1 in
    let y = ref 2 in
    x := !x + 1 | y := !y + 2;
    !x
end
