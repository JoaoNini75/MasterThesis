let app_fun (x : int) =
  x
(*@ ensures true *)

let app_fun2 () =
  ()
(*@ ensures true *)

let app_fun3 (x) (y) : int =
  (x + y)
(*@ ensures true *)

let app_mid_test (x : int) (b : bool) =
  app_fun2 ();
  (2 + 2)
(*@ ensures true *)

let app_let_test (x : int) (b : bool) =
  let app_res = app_fun (1) in
  app_res
(*@ ensures true *)

let app_end_test (x : int) (b : bool) =
  app_fun (1)
(*@ ensures true *)

let apptestfinal () : int =
  let a = ref (4) in
  app_fun3 ((1 * !a)) ((2 * !a))
(*@ ensures true *)

let match1 (x : int) (y : int) : string =
  match x with
  | 0 -> "zero"
  | y -> "y"
(*@ ensures true *)

let match2 (x : int) =
  let res = (
    match x with
    | 0 -> 10
    | 1 -> 20
    | _ -> 0
  ) in
  assert ((res >= 0));
  res
(*@ ensures true *)


