let assert1 () = begin
	assert (1 <> 3)
end
(*@ ensures true *)

let assert2 (x: int) : int = begin
	assert (x + 4 == 5);
	x - 1
end
(*@ ensures true *)

let app_fun (x : int) = begin
	x
end
(*@ ensures true *)

let app_fun2 () = begin
	()
end
(*@ ensures true *)

let app_fun3 (x, y) : int = begin
	x + y
end
(*@ ensures true *)

let app_mid_test (x : int, b : bool) = begin
	app_fun2 ();
	2 + 2
end
(*@ ensures true *)

let app_let_test (x : int, b : bool) = begin
	let app_res = app_fun (1) in
	app_res
end
(*@ ensures true *)

let app_end_test (x : int, b : bool) = begin
	app_fun (1)
end
(*@ ensures true *) 

let apptestfinal () : int = begin
	let a = ref 4 in
	app_fun3 (1 * !a, 2 * !a)
end
(*@ ensures true *)

let match1 (x : int, y : int) : string = begin
  match x with 
	| 0 -> "zero"
	| y -> "y"
end
(*@ ensures true *) 

let match2 (x : int) = begin
	let res = 
		match x with 
		| 0 -> 10
		| 1 -> 20
		| _ -> 0
	in
	assert (res >= 0);
	res
end
(*@ ensures true *) 
