let loop_alignment_biplang (|_ n : int _|, |_ a : int array _|,
  |_ b : int array _|, |_ d : int array _|) = begin

  let i = |_ ref 1 _| in
  assert (!i_l <= n_l);
  b_l.(!i_l) <- a_l.(!i_l);
  d_l.(!i_l) <- b_l.(!i_l - 1);
  i_l := !i_l + 1;
  d_r.(1) <- b_r.(0);

  while !i < n <|> !i < n - 1 do
    (*@ variant   n_l - !i_l
        invariant !i_r >= 0 && !i_l = !i_r + 1
        invariant b_l.(!i_r) = a_l.(!i_r)
        invariant b_l.(!i_r - 1) = b_r.(!i_r - 1) 
        invariant forall k. 1 <= k < !i_l -> d_l.(k) = d_r.(k) *) 

    |_ b.(!i) <- a.(!i) _|;
    d.(!i) <- b.(!i - 1) <|> d.(!i + 1) <- b.(!i);
    i := |_ !i + 1 _|
  done;

  b_r.(n_r) <- a_r.(n_r)
end
(*@ requires n_l >= 1 && n_l = n_r 
    requires Array.length a_l = n_l + 1 
    requires Array.length b_l = n_l + 1 
    requires Array.length d_l = n_l + 1 

    requires Array.length a_l = Array.length a_r
    requires Array.length b_l = Array.length b_r
    requires Array.length d_l = Array.length d_r

    requires forall k. 0 <= k < n_l -> a_l.(k) = a_r.(k)
    requires b_l.(0) = b_r.(0)
		
    ensures  forall k. 1 <= k < n_l -> d_l.(k) = d_r.(k) *)
