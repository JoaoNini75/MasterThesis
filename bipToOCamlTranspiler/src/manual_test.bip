(*@ axiom mult: forall a:int, b:int, c:int, d:int.
   0 < a -> 0 < b -> 0 < c -> 0 < d -> a > b -> c > d -> (a * c) > (b * d) *) 

let cond_align_loops (|_x : int_|, |_n : int_|) : |_int_| = begin
	let y = |_ ref x _| in
	let z = ref 24 <|> ref 16 in 
	let w = |_ ref 0 _| in

	while !y > 4 <|> !y > 4 . (!w mod n <> 0) <|> (!w mod n <> 0) do
		(*@ invariant !y_l = !y_r && !y_l >= 4
        invariant !z_r > 0 && !z_l > !z_r *)

		if (((!w mod n) = 0) <|> ((!w mod n) = 0)) then begin
			z := (!z * !y <|> !z * 2);
			y := |_ !y - 1 _|
		end else begin () end;

		w := |_ !w + 1 _|
	done; 

	|_ !z _|
end
(*@ requires x_l = x_r && x_l >= 4 && n_l = n_r && n_l > 0
    diverges
    ensures  match result with (l_res, r_res) -> l_res > r_res *)
