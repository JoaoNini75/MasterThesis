type number = 
	| Neg of int 
	| Pos of int * bool
	| Zero

type simple = number * bool

and complex =
	| Num1 of simple * int
	| Num2 of simple * bool

and third = complex * simple

let test_construction (num) : number = begin
	let x = Pos (num, true) in
	let y = (x, true) in
	x
end
(*@ ensures true *)

(*let match_destruct () : int = begin
	let x = Pos in
	match x with
	| Zero -> 0
	| Neg n -> n
	| Pos (n, b) -> if b then n else n+1
end
(*@ ensures true *) *)
