let mult_biplang (|_ n: int _|, |_ m: int _|) : |_ int _| = begin
  let i = |_ ref 0 _| in
	let res = |_ ref 0 _| in
	
  while |_ !i < n _| do
    (*@ variant   n_l - !i_l
				invariant !i_l = !i_r && !res_l = ! res_r *)

		let previous_res_l = !res_l in
    let j = |_ ref 0 _| in

		(( 
			while (!j < m) do
				(*@ variant   m_l - !j_l
						invariant 0 <= !j_l <= m_l && !res_l = !res_r + !j_l *)
				res := !res + 1;
				j := !j + 1
			done
		)
    <|>
    (res := !res + m));
    
    assert ((!res_l = previous_res_l + m_l));
    i := |_ !i + 1 _|
  done;

	|_ !res _|
end
(*@ requires n_l = n_r && m_l = m_r && m_l >= 0 
		ensures  match result with (l_res, r_res) -> l_res = r_res *)
