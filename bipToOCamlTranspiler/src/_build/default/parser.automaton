State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On NEWLINE shift to state 1
-- On option(NEWLINE) shift to state 2
-- On file shift to state 97
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST
--   reduce production option(NEWLINE) ->

State 1:
## Known stack suffix:
## NEWLINE
## LR(1) items:
option(NEWLINE) -> NEWLINE . [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR EOF CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR EOF CST
--   reduce production option(NEWLINE) -> NEWLINE

State 2:
## Known stack suffix:
## option(NEWLINE)
## LR(1) items:
file -> option(NEWLINE) . list(def) nonempty_list(stmt) option(NEWLINE) EOF [ # ]
## Transitions:
-- On LET shift to state 3
-- On list(def) shift to state 91
-- On def shift to state 95
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP IF IDENT FOR CST
--   reduce production list(def) ->

State 3:
## Known stack suffix:
## LET
## LR(1) items:
def -> LET . ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ LP IN EQUAL DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ LP IN EQUAL DIV COMMA COLON CMP AND
--   reduce production ident -> IDENT

State 5:
## Known stack suffix:
## LET ident
## LR(1) items:
def -> LET ident . LP loption(separated_nonempty_list(COMMA,ident)) RP COLON suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On LP shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LET ident LP
## LR(1) items:
def -> LET ident LP . loption(separated_nonempty_list(COMMA,ident)) RP COLON suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,ident) shift to state 7
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 8
-- On ident shift to state 88
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 7:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident)

State 8:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,ident)) . RP COLON suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On RP shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP . COLON suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On COLON shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON . suite [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On NEWLINE shift to state 55
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On suite shift to state 87
-- On simple_stmt shift to state 64
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 11:
## Known stack suffix:
## RETURN
## LR(1) items:
simple_stmt -> RETURN . expr [ NEWLINE ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 50
## Reductions:

State 12:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 49
## Reductions:

State 13:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 48
## Reductions:

State 14:
## Known stack suffix:
## LSQ
## LR(1) items:
expr -> LSQ . loption(separated_nonempty_list(COMMA,expr)) RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On separated_nonempty_list(COMMA,expr) shift to state 19
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 46
-- On ident shift to state 17
-- On expr shift to state 22
## Reductions:
-- On RSQ
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 15:
## Known stack suffix:
## LP
## LR(1) items:
expr -> LP . expr RP [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 44
## Reductions:

State 16:
## Known stack suffix:
## CST
## LR(1) items:
expr -> CST . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> CST

State 17:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LP shift to state 18
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> ident

State 18:
## Known stack suffix:
## ident LP
## LR(1) items:
expr -> ident LP . loption(separated_nonempty_list(COMMA,expr)) RP [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On separated_nonempty_list(COMMA,expr) shift to state 19
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 20
-- On ident shift to state 17
-- On expr shift to state 22
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 19:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RSQ RP ]
## Transitions:
## Reductions:
-- On RSQ RP
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 20:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) . RP [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On RP shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## ident LP loption(separated_nonempty_list(COMMA,expr)) RP
## LR(1) items:
expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> ident LP loption(separated_nonempty_list(COMMA,expr)) RP

State 22:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR MOD MINUS LSQ DIV COMMA CMP AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RSQ RP ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSQ RP ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On COMMA shift to state 42
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On RSQ RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 23:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr TIMES expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LSQ shift to state 25
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr -> expr TIMES expr

State 25:
## Known stack suffix:
## expr LSQ
## LR(1) items:
expr -> expr LSQ . expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## expr LSQ expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr LSQ expr . RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On RSQ shift to state 27
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 27:
## Known stack suffix:
## expr LSQ expr RSQ
## LR(1) items:
expr -> expr LSQ expr RSQ . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> expr LSQ expr RSQ

State 28:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr PLUS expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LSQ shift to state 25
-- On DIV shift to state 32
## Reductions:
-- On RSQ RP PLUS OR NEWLINE MINUS COMMA COLON CMP AND
--   reduce production expr -> expr PLUS expr

State 30:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr MOD expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LSQ shift to state 25
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr -> expr MOD expr

State 32:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr DIV expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LSQ shift to state 25
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr -> expr DIV expr

State 34:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr OR expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On RSQ RP OR NEWLINE COMMA COLON
--   reduce production expr -> expr OR expr

State 36:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr MINUS expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LSQ shift to state 25
-- On DIV shift to state 32
## Reductions:
-- On RSQ RP PLUS OR NEWLINE MINUS COMMA COLON CMP AND
--   reduce production expr -> expr MINUS expr

State 38:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr -> expr CMP . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr CMP expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
## Reductions:
-- On RSQ RP OR NEWLINE COMMA COLON AND
--   reduce production expr -> expr CMP expr

State 40:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr AND expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
## Reductions:
-- On RSQ RP OR NEWLINE COMMA COLON AND
--   reduce production expr -> expr AND expr

State 42:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RSQ RP ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On separated_nonempty_list(COMMA,expr) shift to state 43
-- On ident shift to state 17
-- On expr shift to state 22
## Reductions:

State 43:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RSQ RP ]
## Transitions:
## Reductions:
-- On RSQ RP
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 44:
## Known stack suffix:
## LP expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> LP expr . RP [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On RP shift to state 45
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 45:
## Known stack suffix:
## LP expr RP
## LR(1) items:
expr -> LP expr RP . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> LP expr RP

State 46:
## Known stack suffix:
## LSQ loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> LSQ loption(separated_nonempty_list(COMMA,expr)) . RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On RSQ shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LSQ loption(separated_nonempty_list(COMMA,expr)) RSQ
## LR(1) items:
expr -> LSQ loption(separated_nonempty_list(COMMA,expr)) RSQ . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND
--   reduce production expr -> LSQ loption(separated_nonempty_list(COMMA,expr)) RSQ

State 48:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> MINUS expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LSQ shift to state 25
## Reductions:
-- On TIMES RSQ RP PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr -> MINUS expr

State 49:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> NOT expr . [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . AND expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
expr -> expr . OR expr [ TIMES RSQ RP PLUS OR NEWLINE MOD MINUS LSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
## Reductions:
-- On RSQ RP OR NEWLINE COMMA COLON AND
--   reduce production expr -> NOT expr

State 50:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> RETURN expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> RETURN expr

State 51:
## Known stack suffix:
## PRINT
## LR(1) items:
simple_stmt -> PRINT . LP expr RP [ NEWLINE ]
## Transitions:
-- On LP shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## PRINT LP
## LR(1) items:
simple_stmt -> PRINT LP . expr RP [ NEWLINE ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## PRINT LP expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES RP PLUS OR MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> PRINT LP expr . RP [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On RP shift to state 54
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 54:
## Known stack suffix:
## PRINT LP expr RP
## LR(1) items:
simple_stmt -> PRINT LP expr RP . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> PRINT LP expr RP

State 55:
## Known stack suffix:
## NEWLINE
## LR(1) items:
suite -> NEWLINE . BEGIN nonempty_list(stmt) END [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
-- On BEGIN shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## NEWLINE BEGIN
## LR(1) items:
suite -> NEWLINE BEGIN . nonempty_list(stmt) END [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IF shift to state 57
-- On IDENT shift to state 4
-- On FOR shift to state 75
-- On CST shift to state 16
-- On stmt shift to state 81
-- On simple_stmt shift to state 82
-- On nonempty_list(stmt) shift to state 85
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 57:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . expr COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
stmt -> IF . expr COLON suite ELSE COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
stmt -> IF expr . COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
stmt -> IF expr . COLON suite ELSE COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 59
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 59:
## Known stack suffix:
## IF expr COLON
## LR(1) items:
stmt -> IF expr COLON . suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
stmt -> IF expr COLON . suite ELSE COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On NEWLINE shift to state 55
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On suite shift to state 60
-- On simple_stmt shift to state 64
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 60:
## Known stack suffix:
## IF expr COLON suite
## LR(1) items:
stmt -> IF expr COLON suite . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
stmt -> IF expr COLON suite . ELSE COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On ELSE shift to state 61
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST
--   reduce production stmt -> IF expr COLON suite

State 61:
## Known stack suffix:
## IF expr COLON suite ELSE
## LR(1) items:
stmt -> IF expr COLON suite ELSE . COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On COLON shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## IF expr COLON suite ELSE COLON
## LR(1) items:
stmt -> IF expr COLON suite ELSE COLON . suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On NEWLINE shift to state 55
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On suite shift to state 63
-- On simple_stmt shift to state 64
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 63:
## Known stack suffix:
## IF expr COLON suite ELSE COLON suite
## LR(1) items:
stmt -> IF expr COLON suite ELSE COLON suite . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST
--   reduce production stmt -> IF expr COLON suite ELSE COLON suite

State 64:
## Known stack suffix:
## simple_stmt
## LR(1) items:
suite -> simple_stmt . NEWLINE [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
-- On NEWLINE shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## simple_stmt NEWLINE
## LR(1) items:
suite -> simple_stmt NEWLINE . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST
--   reduce production suite -> simple_stmt NEWLINE

State 66:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> ident . LP loption(separated_nonempty_list(COMMA,expr)) RP [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> ident . EQUAL expr [ NEWLINE ]
## Transitions:
-- On LP shift to state 18
-- On EQUAL shift to state 67
## Reductions:
-- On TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND
--   reduce production expr -> ident

State 67:
## Known stack suffix:
## ident EQUAL
## LR(1) items:
simple_stmt -> ident EQUAL . expr [ NEWLINE ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## ident EQUAL expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> ident EQUAL expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> ident EQUAL expr

State 69:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> expr . LSQ expr RSQ EQUAL expr [ NEWLINE ]
simple_stmt -> expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 70
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> expr

State 70:
## Known stack suffix:
## expr LSQ
## LR(1) items:
expr -> expr LSQ . expr RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> expr LSQ . expr RSQ EQUAL expr [ NEWLINE ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expr LSQ expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr LSQ expr . RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES RSQ PLUS OR MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> expr LSQ expr . RSQ EQUAL expr [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On RSQ shift to state 72
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 72:
## Known stack suffix:
## expr LSQ expr RSQ
## LR(1) items:
expr -> expr LSQ expr RSQ . [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> expr LSQ expr RSQ . EQUAL expr [ NEWLINE ]
## Transitions:
-- On EQUAL shift to state 73
## Reductions:
-- On TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND
--   reduce production expr -> expr LSQ expr RSQ

State 73:
## Known stack suffix:
## expr LSQ expr RSQ EQUAL
## LR(1) items:
simple_stmt -> expr LSQ expr RSQ EQUAL . expr [ NEWLINE ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr LSQ expr RSQ EQUAL expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LSQ DIV CMP AND ]
simple_stmt -> expr LSQ expr RSQ EQUAL expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> expr LSQ expr RSQ EQUAL expr

State 75:
## Known stack suffix:
## FOR
## LR(1) items:
stmt -> FOR . ident IN expr COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## FOR ident
## LR(1) items:
stmt -> FOR ident . IN expr COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On IN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## FOR ident IN
## LR(1) items:
stmt -> FOR ident IN . expr COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On ident shift to state 17
-- On expr shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## FOR ident IN expr
## LR(1) items:
expr -> expr . LSQ expr RSQ [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . AND expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
expr -> expr . OR expr [ TIMES PLUS OR MOD MINUS LSQ DIV COLON CMP AND ]
stmt -> FOR ident IN expr . COLON suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 79
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 79:
## Known stack suffix:
## FOR ident IN expr COLON
## LR(1) items:
stmt -> FOR ident IN expr COLON . suite [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On NEWLINE shift to state 55
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IDENT shift to state 4
-- On CST shift to state 16
-- On suite shift to state 80
-- On simple_stmt shift to state 64
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 80:
## Known stack suffix:
## FOR ident IN expr COLON suite
## LR(1) items:
stmt -> FOR ident IN expr COLON suite . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST
--   reduce production stmt -> FOR ident IN expr COLON suite

State 81:
## Known stack suffix:
## stmt
## LR(1) items:
nonempty_list(stmt) -> stmt . [ NEWLINE EOF END ]
nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ NEWLINE EOF END ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IF shift to state 57
-- On IDENT shift to state 4
-- On FOR shift to state 75
-- On CST shift to state 16
-- On stmt shift to state 81
-- On simple_stmt shift to state 82
-- On nonempty_list(stmt) shift to state 84
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:
-- On NEWLINE EOF END
--   reduce production nonempty_list(stmt) -> stmt

State 82:
## Known stack suffix:
## simple_stmt
## LR(1) items:
stmt -> simple_stmt . NEWLINE [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
-- On NEWLINE shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## simple_stmt NEWLINE
## LR(1) items:
stmt -> simple_stmt NEWLINE . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP IF IDENT FOR EOF END CST
--   reduce production stmt -> simple_stmt NEWLINE

State 84:
## Known stack suffix:
## stmt nonempty_list(stmt)
## LR(1) items:
nonempty_list(stmt) -> stmt nonempty_list(stmt) . [ NEWLINE EOF END ]
## Transitions:
## Reductions:
-- On NEWLINE EOF END
--   reduce production nonempty_list(stmt) -> stmt nonempty_list(stmt)

State 85:
## Known stack suffix:
## NEWLINE BEGIN nonempty_list(stmt)
## LR(1) items:
suite -> NEWLINE BEGIN nonempty_list(stmt) . END [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
-- On END shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## NEWLINE BEGIN nonempty_list(stmt) END
## LR(1) items:
suite -> NEWLINE BEGIN nonempty_list(stmt) END . [ RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT NEWLINE MINUS LSQ LP LET IF IDENT FOR EOF END ELSE CST
--   reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END

State 87:
## Known stack suffix:
## LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON suite
## LR(1) items:
def -> LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON suite . [ RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP LET IF IDENT FOR CST
--   reduce production def -> LET ident LP loption(separated_nonempty_list(COMMA,ident)) RP COLON suite

State 88:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ RP ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RP ]
## Transitions:
-- On COMMA shift to state 89
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 89:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RP ]
## Transitions:
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,ident) shift to state 90
-- On ident shift to state 88
## Reductions:

State 90:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 91:
## Known stack suffix:
## option(NEWLINE) list(def)
## LR(1) items:
file -> option(NEWLINE) list(def) . nonempty_list(stmt) option(NEWLINE) EOF [ # ]
## Transitions:
-- On RETURN shift to state 11
-- On PRINT shift to state 51
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LSQ shift to state 14
-- On LP shift to state 15
-- On IF shift to state 57
-- On IDENT shift to state 4
-- On FOR shift to state 75
-- On CST shift to state 16
-- On stmt shift to state 81
-- On simple_stmt shift to state 82
-- On nonempty_list(stmt) shift to state 92
-- On ident shift to state 66
-- On expr shift to state 69
## Reductions:

State 92:
## Known stack suffix:
## option(NEWLINE) list(def) nonempty_list(stmt)
## LR(1) items:
file -> option(NEWLINE) list(def) nonempty_list(stmt) . option(NEWLINE) EOF [ # ]
## Transitions:
-- On NEWLINE shift to state 1
-- On option(NEWLINE) shift to state 93
## Reductions:
-- On EOF
--   reduce production option(NEWLINE) ->

State 93:
## Known stack suffix:
## option(NEWLINE) list(def) nonempty_list(stmt) option(NEWLINE)
## LR(1) items:
file -> option(NEWLINE) list(def) nonempty_list(stmt) option(NEWLINE) . EOF [ # ]
## Transitions:
-- On EOF shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## option(NEWLINE) list(def) nonempty_list(stmt) option(NEWLINE) EOF
## LR(1) items:
file -> option(NEWLINE) list(def) nonempty_list(stmt) option(NEWLINE) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> option(NEWLINE) list(def) nonempty_list(stmt) option(NEWLINE) EOF

State 95:
## Known stack suffix:
## def
## LR(1) items:
list(def) -> def . list(def) [ RETURN PRINT NOT MINUS LSQ LP IF IDENT FOR CST ]
## Transitions:
-- On LET shift to state 3
-- On list(def) shift to state 96
-- On def shift to state 95
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP IF IDENT FOR CST
--   reduce production list(def) ->

State 96:
## Known stack suffix:
## def list(def)
## LR(1) items:
list(def) -> def list(def) . [ RETURN PRINT NOT MINUS LSQ LP IF IDENT FOR CST ]
## Transitions:
## Reductions:
-- On RETURN PRINT NOT MINUS LSQ LP IF IDENT FOR CST
--   reduce production list(def) -> def list(def)

State 97:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

